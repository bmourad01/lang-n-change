let get_pm (es: term list) =
  es[`e` when not(binding?(e)) && not(var?(e))]: e
in

let get_vs (es: term list) =
  es[`e` when var?(e) && var_kind?(e, "Value")]: e
in

let es_of_op (op: string) =
  head(syntax("Expression")[`(opp es)` when op = opp]: es)
in

(* transform elimination forms to big-step style *)
set_rules(rules(keep)[`(op args) --> rhs`]:
  let exprs = es_of_op(op)' in
  if empty?(exprs) then none
  else
    let v_res = fresh_var("v") in
    let emap = zip(args, exprs) in
    let pmvs = get_pm(args) @ get_vs(args) in
    let new_args = emap[`(arg, expr)`]: if member?(arg, pmvs) then expr else arg in
    some([rule_name(self)] {
      pmvs[`e`]:
        let lhs = assoc(e, emap) in
        if some?(lhs)
        then some(get(lhs) --> e)
        else none,
      rhs --> v_res,
      premises(self)
      -------------------------
      (op new_args) --> v_res
    })
);

(* generate the contextual rules for intro forms *)
add_rules(syntax("Value")[`(op vs)`]:
  let es = es_of_op(op) in
  let emap = zip(vs, es) in
  let pmvs = get_pm(vs) @ get_vs(vs) in
  let args = emap[`(v, e)`]: if member?(v, pmvs) then e else v in
  some(["R-VALUE-" ^ uppercase(op)] {
    pmvs[`e`]:
      let ee = assoc!(e, emap) in
      if (var?(e) && var_kind?(e, "Type"))
         || (var?(ee) && var_kind?(ee, "Type"))
      then none
      else some(ee --> e)
    -----------------------
    (op args) --> (op vs)
  })
);

(* all steps now explicitly result in a value *)
add_relation($e --> $v);

(* evaluation contexts are not needed anymore *)
remove_syntax("Context")
