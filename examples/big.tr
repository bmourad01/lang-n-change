let get_pm (es: term list) =
  es >> e >>
    if not(binding?(e)) && not(var?(e))
    then some(e)
    else none
in

let get_vs (es: term list) =
  es >> e >>
    if var?(e) && var_kind?(e, "Value")
    then some(e)
    else none
in

set_rules(rules >>! (op args) --> rhs >>
  let exprs = syntax("Expression") >> (opp exprs) >>
    if opp = op then some(exprs) else none
  in
  if empty?(exprs) then
    none
  else
    let v_res = fresh_var("v") in
    let exprs = head(exprs)' in
    let emap = zip(args, exprs) in
    let pm = get_pm(args) in
    let vs = get_vs(args) in
    let pmvs = append(pm, vs) in
    let new_args = emap >> (arg, expr) >>
      if member?(arg, pmvs)
      then expr
      else arg
    in
    
    some([rule_name(self)] {
      pmvs >> e >>
        let lhs = assoc(e, emap) in
        if some?(lhs)
        then some(get(lhs) --> e)
        else none,
      rhs --> v_res,
      premises(self)
      -------------------------
      (op new_args) --> v_res
    })
);

add_rules(concat(
  syntax("Value") >> (op vs) >>
    syntax("Expression") >> (opp es) >>
      if op = opp then
        let emap = zip(vs, es) in
        let pm = get_pm(vs) in
        let vvs = get_vs(vs) in
        let pmvs = append(pm, vvs) in
        let args = emap >> (v, e) >>
          if member?(v, pmvs) then e else v
        in
        
        some(["R-VALUE-" ^ uppercase(op)] {
          pmvs >> e >>
            let ee = get(assoc(e, emap)) in
            if (var?(e) && var_kind?(e, "Type"))
               || (var?(ee) && var_kind?(ee, "Type"))
            then none
            else some(ee --> e)
          -----------------------
          (op args) --> (op vs)
        })
      else none
));

add_relation($e --> $v);
remove_syntax("Context")
