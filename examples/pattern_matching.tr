Expression e ::= ... | ("pmatch" [$e, [<[$p, $e]>...]]).;

let has_binding (ts: term list) : bool =
  not(empty?(ts[`t`]: if binding?(t) then some(t) else none))
in
    
Pattern p ::= {
  Value[`(op vs)` when not(has_binding(vs))]:
    let ps = vs(keep)[`v` when var?(v) && var_kind?(v, "Value")]: $p in
    ((op ^ "_p") ps)
};

Pattern p ::= ... | ("pattern_var" [$x, $T]).;
Context E ::= ... | ("pmatch" [$E, [<[$p, $e]>...]]).;
MatchResult MR ::= ("match_error" []) | ("match_subst" [[<[$v, $x]>...].]).;
    
add_relation($Gamma |- $p : $T ==> $Gamma);

# mode: ... | typeof_match => inp inp out out;
# principal: ... | typeof_match => no yes no no;
    
let can_be_pattern (op: string) : bool =
  not(empty?(Pattern[`(op_p _)` when op_p = op]: self))
in

(Rule[`gamma |- (op es) : t` when op_kind?(op, "Value")]:
  let p_op = op ^ "_p" in
  if not(can_be_pattern(p_op)) then none
  else
    let es_to_ps = zip(es, es[`_`]: fresh_var("p")) in
    let prems = Premises[`_ |- e : _`]:
      if member?(e, es) then some(self) else none
    in
    let prems_map = zip(prems, prems[`_`]: fresh_var("Gamma")) in
    let args_with_ps = es_to_ps[`(e, p)`]:
      if var?(e) && var_kind?(e, "Expression") then p else e
    in
    let new_gammas = prems_map[`(_, g)`]: g in
    let result = match new_gammas with [] -> gamma | _ -> $Gamma' in
    some(["T-MATCH-" ^ uppercase(op)] {
      Premises[`prem`]:
        match prem with
        | gamma |- e : t ->
          (match assoc(prem, prems_map) with
           | some(g) -> gamma |- assoc!(e, es_to_ps) : t ==> g
           | _ -> self)
        | _ -> self,
      (match new_gammas with
       | [] -> none
       | _ -> some(&($Gamma' = $map_union(gamma :: new_gammas))))
      -----------------------------------------------------------
      gamma |- (p_op args_with_ps) : t ==> result
    })
);

["T-MATCH-VAR"] {
  ------------------------------------------------------------
  $Gamma |- ("pattern_var" [$x, $T]) : $T ==> [$x => $T]$Gamma
};

add_relation("match_pattern", [$p, $v, $MR]);

# mode: ... | match_pattern => inp inp out;
# principal: ... | match_pattern => yes yes no;

(Value[`(op vs)`]:
  let p_op = op ^ "_p" in
  if not(can_be_pattern(p_op)) then none else
    let vs_to_ps = zip(vs, vs[`v`]:
      if not(var?(v) && var_kind?(v, "Value")) || binding?(v) then v
      else fresh_var("p"))
    in
    let subs = zip(vs, vs[`_`]: fresh_var("S")) in  
    let subs_un = subs[`(v, s)`]:
      if var?(v) && var_kind?(v, "Value") then some(s) else none
    in
    let ps = vs_to_ps[`(_, p)`]: p in
    let result = match subs_un with [] -> $nil | s :: [] -> s | _ -> $S in
    some(["MATCH-" ^ uppercase(op)] {
      subs[`(v, s)`]:
        if var?(v) && var_kind?(v, "Value")
        then some(&("match_pattern" [assoc!(v, vs_to_ps), v, ("match_subst" [s.])]))
        else none,
      (match subs_un with
       | [] -> none
       | _ :: [] -> none
       | _ -> some(&($S = $map_union(subs_un))))
      --------------------------------------------------------------------
      &("match_pattern" [(p_op ps), (op vs), ("match_subst" [result.])])
    })
);

let orig_name (p_op: string) : string option =
  let res = Value[`(op _)` when p_op = (op ^ "_p")]: op in
  match res with
  | [] -> none
  | op :: _ -> some(op)
in

(concat(Pattern[`(p_op ps)`]: (
  Value[`(op vs)` when not(p_op = (op ^ "_p"))]:
    match orig_name(p_op) with
    | none -> none
    | some(op2) ->
      some(["MATCH-ERROR-" ^ uppercase(op2) ^ "-" ^ uppercase(op)] {
        -----------------------------------------------------------
        &("match_pattern" [(p_op ps), (op vs), ("match_error" [])])
      })
)));

["MATCH-VAR"] {
  ------------------------------------------------------------------------------------------
  &("match_pattern" [("pattern_var" [$x, $T]), $v, ("match_subst" [$(<[$v, $x]> :: $nil).])])
};
    
add_relation("types_equal", [[$T...], $T]);

# mode: ... | types_equal => inp out;
# principal: ... | types_equal => yes no;

["TYPES-EQUAL-NIL"] {
  ----------------------------
  &("types_equal" [$nil, $T])
};

["TYPES-EQUAL"] {
  &("types_equal" [$typs, $T])
  -------------------------------------
  &("types_equal" [$($T :: $typs), $T])
};

add_relation("typeof_pmatch", [$Gamma, $T, [<[$p, $e]>...], [$T...]]);

# mode: ... | typeof_pmatch => inp inp inp out;
# principal: ... | typeof_pmatch => no no yes no;

["TYPEOF-PMATCH-NIL"] {
  ------------------------------------------
  &("typeof_pmatch" [$Gamma, $T, $nil, $nil])
};

["TYPEOF-PMATCH"] {
  $Gamma |- $p : $T ==> $Gamma',
  $Gamma' |- $e : $T',
  &("typeof_pmatch" [$Gamma, $T, $M, $typs])
  ----------------------------------------------------
  &("typeof_pmatch" [$Gamma, $T, $(<[$p, $e]> :: $M), $($T' :: $typs)])
};

["T-PMATCH"] {
  $Gamma |- $e : $T,
  &("typeof_pmatch" [$Gamma, $T, $($branch :: $M), $typs]),
  &("types_equal" [$typs, $T'])
  ------------------------------------
  $Gamma |- ("pmatch" [$e, $($branch :: $M)]) : $T'
};

add_relation("first_non_error", [[<[$MR, $e]>...], $MR, $e]);

# mode: ... | first_non_error => inp out out;
# principal: ... | first_non_error => yes no no;

add_rule(["FIRST-NON-ERROR-NIL"] {
  -----------------------------------------------------------
  &("first_non_error" [$nil, ("match_error" []), ("err" [])])
});

["FIRST-NON-ERROR-NEXT"] {
  &("first_non_error" [$M, $S, $e'])
  -------------------------------------------------------------------
  &("first_non_error" [$(<[("match_error" []), $e]> :: $M), $S, $e'])
};

["FIRST-NON-ERROR-SUCCESS"] {
  ----------------------------------------------------------------------------------------
  &("first_non_error" [$(<[("match_subst" [$S.]), $e]> :: $M), ("match_subst" [$S.]), $e])
};

add_relation("do_match", [$v, [<[$p, $e]>...], [<[$MR, $e]>...]]);

# mode: ... | do_match => inp inp out;
# principal: ... | do_match => no yes no;

["DO-MATCH-NIL"] {
  -------------------------------
  &("do_match" [$v, $nil, $nil])
};
    
["DO-MATCH"] {
  &("match_pattern" [$p, $v, $MR]),
  &("do_match" [$v, $M, $result])
  -------------------------------------------------------------------
  &("do_match" [$v, $(<[$p, $e]> :: $M), $(<[$MR, $e]> :: $result)])
};

["R-PMATCH-SUCCESS"] {
  &("do_match" [$v, $M, $result]),
  &("first_non_error" [$result, ("match_subst" [$S.]), $e])
  ----------------------------------------------------------
  ("pmatch" [$v, $M]) --> $e{S: Expression}
};

["R-PMATCH-ERROR"] {
  &("do_match" [$v, $M, $result]),
  &("first_non_error" [$result, ("match_error" []), $e])
  ----------------------------------------------------------
  ("pmatch" [$v, $M]) --> $e
}
