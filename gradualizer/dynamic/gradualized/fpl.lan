Context E ::= (app E e) | (app v E) | (appT T E) | (case E (x)e (x)e) | (cons T E e) | (cons T v E) | (fold E (Z)T) | (fst E) | (gcast E T T L) | (head T E) | (hole.) | (inl T E) | (inr T E) | (is_nil T E) | (is_zero E) | (ite E e e) | (pair E e) | (pair v E) | (pred E) | (raise T E) | (snd E) | (succ E) | (tail T E) | (try E e) | (unfold E)
Environment Gamma ::= [<x, T>...]
Error er ::= (blame T L) | (raise T v)
Expression e ::= x | (abs T (x)e) | (absT (Z)e) | (app e e) | (appT T e) | (blame T L) | (case e (x)e (x)e) | (cons T e e) | (ff.) | (fix e) | (fold e (Z)T) | (fst e) | (gcast e T T L) | (head T e) | (inl T e) | (inr T e) | (is_nil T e) | (is_zero e) | (ite e e e) | (let e (x)e) | (letrec T (x)e (x)e) | (nill T) | (pair e e) | (pred e) | (raise T e) | (snd e) | (succ e) | (tail T e) | (try e e) | (tt.) | (unfold e) | (zero.)
Ground G ::= (all (Z)T) | (arrow (dyn.) (dyn.)) | (bool.) | (list (dyn.)) | (mu (Z)T) | (nat.) | (plus (dyn.) (dyn.)) | (times (dyn.) (dyn.))
Type T ::= Z | (all (Z)T) | (arrow T T) | (bool.) | (dyn.) | (list T) | (mu (Z)T) | (nat.) | (plus T T) | (times T T)
Value v ::= (abs T (x)e) | (absT (Z)e) | (cons T v v) | (ff.) | (fold v (Z)T) | (gcast v G (dyn.) L) | (gcast v (all (Z)T) (all (Z)T) L) | (gcast v (arrow T T) (arrow T T) L) | (gcast v (list T) (list T) L) | (gcast v (mu (Z)T) (mu (Z)T) L) | (gcast v (plus T T) (plus T T) L) | (gcast v (times T T) (times T T) L) | (inl T v) | (inr T v) | (nill T) | (pair v v) | (succ v) | (tt.) | (zero.)

%

T ~ T.
contains e e.
ground_of T G.
e --> e.
Gamma |- e : T.

%

[C-ALL]
T ~ T'
--------------------------------------
(all (Z)T) ~ (all (Z)T').

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-BOOL]
--------------------------------------
(bool.) ~ (bool.).

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-LIST]
T ~ T'
--------------------------------------
(list T) ~ (list T').

[C-MU]
T ~ T'
--------------------------------------
(mu (Z)T) ~ (mu (Z)T').

[C-NAT]
--------------------------------------
(nat.) ~ (nat.).

[C-PLUS]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(plus T1 T2) ~ (plus T1' T2').

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[C-TIMES]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(times T1 T2) ~ (times T1' T2').

[CONTAINS-APP-0]
contains e5 e4
--------------------------------------
contains (app e5 e) e4.

[CONTAINS-APP-1]
contains e7 e6
--------------------------------------
contains (app v e7) e6.

[CONTAINS-APPT-2]
contains e9 e8
--------------------------------------
contains (appT T e9) e8.

[CONTAINS-CASE-3]
contains e11 e10
--------------------------------------
contains (case e11 (x)e1 (x)e2) e10.

[CONTAINS-CONS-4]
contains e13 e12
--------------------------------------
contains (cons T e13 e) e12.

[CONTAINS-CONS-5]
contains e15 e14
--------------------------------------
contains (cons T v e15) e14.

[CONTAINS-E]
--------------------------------------
contains e e.

[CONTAINS-FOLD-6]
contains e17 e16
--------------------------------------
contains (fold e17 (Z)T) e16.

[CONTAINS-FST-7]
contains e19 e18
--------------------------------------
contains (fst e19) e18.

[CONTAINS-GCAST-8]
contains e21 e20
--------------------------------------
contains (gcast e21 T1 T2 L) e20.

[CONTAINS-HEAD-9]
contains e23 e22
--------------------------------------
contains (head T e23) e22.

[CONTAINS-INL-11]
contains e25 e24
--------------------------------------
contains (inl T e25) e24.

[CONTAINS-INR-12]
contains e27 e26
--------------------------------------
contains (inr T e27) e26.

[CONTAINS-IS_NIL-13]
contains e29 e28
--------------------------------------
contains (is_nil T e29) e28.

[CONTAINS-IS_ZERO-14]
contains e31 e30
--------------------------------------
contains (is_zero e31) e30.

[CONTAINS-ITE-15]
contains e33 e32
--------------------------------------
contains (ite e33 e1 e2) e32.

[CONTAINS-PAIR-16]
contains e35 e34
--------------------------------------
contains (pair e35 e) e34.

[CONTAINS-PAIR-17]
contains e37 e36
--------------------------------------
contains (pair v e37) e36.

[CONTAINS-PRED-18]
contains e39 e38
--------------------------------------
contains (pred e39) e38.

[CONTAINS-RAISE-19]
contains e41 e40
--------------------------------------
contains (raise T e41) e40.

[CONTAINS-SND-20]
contains e43 e42
--------------------------------------
contains (snd e43) e42.

[CONTAINS-SUCC-21]
contains e45 e44
--------------------------------------
contains (succ e45) e44.

[CONTAINS-TAIL-22]
contains e47 e46
--------------------------------------
contains (tail T e47) e46.

[CONTAINS-TRY-23]
contains e49 e48
--------------------------------------
contains (try e49 e) e48.

[CONTAINS-UNFOLD-24]
contains e51 e50
--------------------------------------
contains (unfold e51) e50.

[GROUND-OF-ALL]
--------------------------------------
ground_of (all (Z)T) (all (Z)T).

[GROUND-OF-ARROW]
--------------------------------------
ground_of (arrow T1 T2) (arrow (dyn.) (dyn.)).

[GROUND-OF-BOOL]
--------------------------------------
ground_of (bool.) (bool.).

[GROUND-OF-LIST]
--------------------------------------
ground_of (list T) (list (dyn.)).

[GROUND-OF-MU]
--------------------------------------
ground_of (mu (Z)T) (mu (Z)T).

[GROUND-OF-NAT]
--------------------------------------
ground_of (nat.) (nat.).

[GROUND-OF-PLUS]
--------------------------------------
ground_of (plus T1 T2) (plus (dyn.) (dyn.)).

[GROUND-OF-TIMES]
--------------------------------------
ground_of (times T1 T2) (times (dyn.) (dyn.)).

[R-ALPHA]
--------------------------------------
(appT T (absT (Z)e)) --> e{T/Z}.

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-BLAME]
nil |- e : T1,
contains e (blame T2 L),
not(e = (blame T2 L))
--------------------------------------
e --> (blame T1 L).

[R-CASE-INL]
--------------------------------------
(case (inl T v) (x1)e1 (x2)e2) --> e1{v/x1}.

[R-CASE-INR]
--------------------------------------
(case (inr T v) (x1)e1 (x2)e2) --> e2{v/x2}.

[R-ELIM-GCAST-APP]
--------------------------------------
(app (gcast v3 (arrow T1' T2') (arrow T1 T2) L) v) --> (gcast (app v3 (gcast v T1 T1' L)) T2' T2 L).

[R-ELIM-GCAST-APPT]
--------------------------------------
(appT T1 (gcast v4 (all (Z)T2') (all (Z)T2) L)) --> (gcast (appT T1 v4) T2'{T1/Z} T2{T1/Z} L).

[R-ELIM-GCAST-CASE]
--------------------------------------
(case (gcast v5 (sum T1' T2') (sum T1 T2) L) (x1)e2 (x2)e3) --> (case v5 e2{(gcast x1 T1' T1 L)/x1} e3{(gcast x2 T2' T2 L)/x2}).

[R-ELIM-GCAST-FST]
--------------------------------------
(fst (gcast v6 (times T1' T2') (times T1 T2) L)) --> (gcast (fst v6) T1' T1 L).

[R-ELIM-GCAST-HEAD]
--------------------------------------
(head T (gcast v7 (list T') (list T) L)) --> (gcast (head T' v7) T' T L).

[R-ELIM-GCAST-IS_NIL]
--------------------------------------
(is_nil T (gcast v8 (list T') (list T) L)) --> (is_nil T' v8).

[R-ELIM-GCAST-SND]
--------------------------------------
(snd (gcast v9 (times T1' T2') (times T1 T2) L)) --> (gcast (snd v9) T2' T2 L).

[R-ELIM-GCAST-TAIL]
--------------------------------------
(tail T (gcast v10 (list T') (list T) L)) --> (gcast (tail T' v10) (list T') (list T) L).

[R-ELIM-GCAST-TRY]
--------------------------------------
(try (gcast v11 T' T L) e2) --> (gcast (try v11 (gcast e2 (arrow (int.) T) (arrow (int.) T') L)) T' T L).

[R-ELIM-GCAST-UNFOLD]
--------------------------------------
(unfold (gcast v12 (mu (Z)T') (mu (Z)T) L)) --> (gcast (unfold v12) T'{(mu (Z)T')/Z} T{(mu (Z)T)/Z} L).

[R-FIX]
--------------------------------------
(fix (abs T (x)e)) --> e{(fix (abs T (x)e))/x}.

[R-FST]
--------------------------------------
(fst (pair v1 v2)) --> v1.

[R-GCAST-ALL]
--------------------------------------
(gcast v (all (Z)T) (all (Z)T) L) --> v.

[R-GCAST-ARROW]
--------------------------------------
(gcast v (arrow T1 T2) (arrow T1 T2) L) --> v.

[R-GCAST-DYN-TO-T]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v (dyn.) T L) --> (gcast (gcast v (dyn.) G L) G T L).

[R-GCAST-GCAST-ERROR]
not(G1 = G2)
--------------------------------------
(gcast (gcast v G1 (dyn.) L1) (dyn.) G2 L2) --> (blame G2 L2).

[R-GCAST-GCAST-OK]
--------------------------------------
(gcast (gcast v G (dyn.) L1) (dyn.) G L2) --> v.

[R-GCAST-LIST]
--------------------------------------
(gcast v (list T) (list T) L) --> v.

[R-GCAST-MU]
--------------------------------------
(gcast v (mu (Z)T) (mu (Z)T) L) --> v.

[R-GCAST-PLUS]
--------------------------------------
(gcast v (plus T1 T2) (plus T1 T2) L) --> v.

[R-GCAST-T-TO-DYN]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v T (dyn.) L) --> (gcast (gcast v T G L) G (dyn.) L).

[R-GCAST-TIMES]
--------------------------------------
(gcast v (times T1 T2) (times T1 T2) L) --> v.

[R-HEAD-CONS]
--------------------------------------
(head T (cons T v1 v2)) --> v1.

[R-HEAD-NIL]
--------------------------------------
(head T (nill T')) --> (raise T (zero.)).

[R-IF-FALSE]
--------------------------------------
(ite (ff.) e1 e2) --> e2.

[R-IF-TRUE]
--------------------------------------
(ite (tt.) e1 e2) --> e1.

[R-IS-NIL-FALSE]
--------------------------------------
(is_nil T (cons T v1 v2)) --> (ff.).

[R-IS-NIL-TRUE]
--------------------------------------
(is_nil T (nill T)) --> (tt.).

[R-IS-ZERO-FALSE]
--------------------------------------
(is_zero (succ v)) --> (ff.).

[R-IS-ZERO-TRUE]
--------------------------------------
(is_zero (zero.)) --> (tt.).

[R-LET]
--------------------------------------
(let v (x)e) --> e{v/x}.

[R-LETREC]
--------------------------------------
(letrec T (x)e1 (x)e2) --> (let (fix (abs T (x)e1)) (x)e2).

[R-PRED-SUCC]
--------------------------------------
(pred (succ v)) --> v.

[R-PRED-ZERO]
--------------------------------------
(pred (zero.)) --> (raise (nat.) (zero.)).

[R-SND]
--------------------------------------
(snd (pair v1 v2)) --> v2.

[R-TAIL-CONS]
--------------------------------------
(tail T (cons T v1 v2)) --> v2.

[R-TAIL-NIL]
--------------------------------------
(tail T (nill T')) --> (raise (list T) (succ (zero.))).

[R-TRY-1]
--------------------------------------
(try (raise T v) e) --> (app e v).

[R-TRY-2]
--------------------------------------
(try v e) --> v.

[R-UNFOLD]
--------------------------------------
(unfold (fold v (Z)T)) --> v.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-ABST]
Gamma |- e : T
--------------------------------------
Gamma |- (absT (Z)e) : (all (Z)T).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-APPT]
Gamma |- e : (all (Z)T2)
--------------------------------------
Gamma |- (appT T1 e) : T2{T1/Z}.

[T-BLAME]
--------------------------------------
Gamma |- (blame T L) : T.

[T-CASE]
Gamma |- e1 : (sum T1 T2),
[x1 => T1]Gamma |- e2 : T,
[x2 => T2]Gamma |- e3 : T
--------------------------------------
Gamma |- (case e1 (x1)e2 (x2)e3) : T.

[T-CONS]
Gamma |- e1 : T,
Gamma |- e2 : (list T)
--------------------------------------
Gamma |- (cons T e1 e2) : (list T).

[T-FALSE]
--------------------------------------
Gamma |- (ff.) : (bool.).

[T-FIX]
Gamma |- e : (arrow T T)
--------------------------------------
Gamma |- (fix e) : T.

[T-FOLD]
Gamma |- e : T{(mu (Z)T)/Z}
--------------------------------------
Gamma |- (fold e (Z)T) : (mu (Z)T).

[T-FST]
Gamma |- e : (times T1 T2)
--------------------------------------
Gamma |- (fst e) : T1.

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-HEAD]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (head T e) : T.

[T-IF]
Gamma |- e1 : (bool.),
Gamma |- e2 : T,
Gamma |- e3 : T
--------------------------------------
Gamma |- (ite e1 e2 e3) : T.

[T-INL]
Gamma |- e : T1
--------------------------------------
Gamma |- (inl T2 e) : (sum T1 T2).

[T-INR]
Gamma |- e : T2
--------------------------------------
Gamma |- (inr T1 e) : (sum T1 T2).

[T-IS-NIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (is_nil T e) : (bool.).

[T-IS-ZERO]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (is_zero e) : (bool.).

[T-LET]
Gamma |- e1 : T1,
[x => T1]Gamma |- e2 : T2
--------------------------------------
Gamma |- (let e1 (x)e2) : T2.

[T-LETREC]
[x => T1]Gamma |- e1 : T1,
[x => T1]Gamma |- e2 : T2
--------------------------------------
Gamma |- (letrec T1 (x)e1 (x)e2) : T2.

[T-NIL]
--------------------------------------
Gamma |- (nill T) : (list T).

[T-PAIR]
Gamma |- e1 : T1,
Gamma |- e2 : T2
--------------------------------------
Gamma |- (pair e1 e2) : (times T1 T2).

[T-PRED]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (pred e) : (nat.).

[T-RAISE]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (raise T e) : T.

[T-SND]
Gamma |- e : (times T1 T2)
--------------------------------------
Gamma |- (snd e) : T2.

[T-SUCC]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (succ e) : (nat.).

[T-TAIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (tail T e) : (list T).

[T-TRUE]
--------------------------------------
Gamma |- (tt.) : (bool.).

[T-TRY]
Gamma |- e1 : T,
Gamma |- e2 : (arrow (int.) T)
--------------------------------------
Gamma |- (try e1 e2) : T.

[T-UNFOLD]
Gamma |- e : (mu (Z)T)
--------------------------------------
Gamma |- (unfold e) : T{(mu (Z)T)/Z}.

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

[T-ZERO]
--------------------------------------
Gamma |- (zero.) : (nat.).

%

eliminationform: app => 0 | appT => 1 | case => 0 | fst => 0 | head => 1 | is_nil => 1 | is_zero => 0 | ite => 0 | pred => 0 | snd => 0 | tail => 1 | try => 0 | unfold => 0.
mode: consistent => inp inp | contains => inp inp | ground_of => inp out | step => inp out | typeof => inp inp out.
principal: consistent => yes yes | contains => yes no | ground_of => yes no | step => yes no | typeof => no yes no.
variance: arrow => contra cov | list => cov | plus => cov cov | times => cov cov.
