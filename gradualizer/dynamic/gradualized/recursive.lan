Context E ::= (app E e) | (app v E) | (fold E (Z)T) | (gcast E T T L) | (hole.) | (unfold E)
Environment Gamma ::= [<x, T>...]
Error er ::= (blame T L)
Expression e ::= x | (abs T (x)e) | (app e e) | (blame T L) | (fold e (Z)T) | (gcast e T T L) | (unfold e) | (zero.)
Ground G ::= (arrow (dyn.) (dyn.)) | (mu (Z)T) | (nat.)
Type T ::= Z | (arrow T T) | (dyn.) | (mu (Z)T) | (nat.)
Value v ::= (abs T (x)e) | (fold v (Z)T) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (gcast v (mu (Z)T) (mu (Z)T) L) | (zero.)

%

T ~ T.
contains e e.
ground_of T G.
e --> e.
Gamma |- e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-MU]
T ~ T'
--------------------------------------
(mu (Z)T) ~ (mu (Z)T').

[C-NAT]
--------------------------------------
(nat.) ~ (nat.).

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[CONTAINS-APP-0]
contains e4 e3
--------------------------------------
contains (app e4 e) e3.

[CONTAINS-APP-1]
contains e6 e5
--------------------------------------
contains (app v e6) e5.

[CONTAINS-E]
--------------------------------------
contains e e.

[CONTAINS-FOLD-2]
contains e8 e7
--------------------------------------
contains (fold e8 (Z)T) e7.

[CONTAINS-GCAST-3]
contains e10 e9
--------------------------------------
contains (gcast e10 T1 T2 L) e9.

[CONTAINS-UNFOLD-5]
contains e12 e11
--------------------------------------
contains (unfold e12) e11.

[GROUND-OF-ARROW]
--------------------------------------
ground_of (arrow T1 T2) (arrow (dyn.) (dyn.)).

[GROUND-OF-MU]
--------------------------------------
ground_of (mu (Z)T) (mu (Z)T).

[GROUND-OF-NAT]
--------------------------------------
ground_of (nat.) (nat.).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-BLAME]
nil |- e : T1,
contains e (blame T2 L),
not(e = (blame T2 L))
--------------------------------------
e --> (blame T1 L).

[R-ELIM-GCAST-APP]
--------------------------------------
(app (gcast v1 (arrow T1' T2') (arrow T1 T2) L) v) --> (gcast (app v1 (gcast v T1 T1' L)) T2' T2 L).

[R-ELIM-GCAST-UNFOLD]
--------------------------------------
(unfold (gcast v2 (mu (Z)T') (mu (Z)T) L)) --> (gcast (unfold v2) T'{(mu (Z)T')/Z} T{(mu (Z)T)/Z} L).

[R-GCAST-ARROW]
--------------------------------------
(gcast v (arrow T1 T2) (arrow T1 T2) L) --> v.

[R-GCAST-DYN-TO-T]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v (dyn.) T L) --> (gcast (gcast v (dyn.) G L) G T L).

[R-GCAST-GCAST-ERROR]
not(G1 = G2)
--------------------------------------
(gcast (gcast v G1 (dyn.) L1) (dyn.) G2 L2) --> (blame G2 L2).

[R-GCAST-GCAST-OK]
--------------------------------------
(gcast (gcast v G (dyn.) L1) (dyn.) G L2) --> v.

[R-GCAST-MU]
--------------------------------------
(gcast v (mu (Z)T) (mu (Z)T) L) --> v.

[R-GCAST-T-TO-DYN]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v T (dyn.) L) --> (gcast (gcast v T G L) G (dyn.) L).

[R-UNFOLD]
--------------------------------------
(unfold (fold v (Z)T)) --> v.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-BLAME]
--------------------------------------
Gamma |- (blame T L) : T.

[T-FOLD]
Gamma |- e : T{(mu (Z)T)/Z}
--------------------------------------
Gamma |- (fold e (Z)T) : (mu (Z)T).

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-UNFOLD]
Gamma |- e : (mu (Z)T)
--------------------------------------
Gamma |- (unfold e) : T{(mu (Z)T)/Z}.

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

[T-ZERO]
--------------------------------------
Gamma |- (zero.) : (nat.).

%

eliminationform: app => 0 | unfold => 0.
mode: consistent => inp inp | contains => inp inp | ground_of => inp out | step => inp out | typeof => inp inp out.
principal: consistent => yes yes | contains => yes no | ground_of => yes no | step => yes no | typeof => no yes no.
variance: arrow => contra cov.
