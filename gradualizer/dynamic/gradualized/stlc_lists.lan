Context E ::= (app E e) | (app v E) | (cons T E e) | (cons T v E) | (gcast E T T L) | (head T E) | (hole.) | (is_nil T E) | (tail T E)
Environment Gamma ::= [<x, T>...]
Error er ::= (blame T L)
Expression e ::= x | (abs T (x)e) | (app e e) | (blame T L) | (cons T e e) | (ff.) | (gcast e T T L) | (head T e) | (is_nil T e) | (nill T) | (tail T e) | (tt.)
Ground G ::= (arrow (dyn.) (dyn.)) | (bool.) | (list (dyn.))
Type T ::= (arrow T T) | (bool.) | (dyn.) | (list T)
Value v ::= (abs T (x)e) | (cons T v v) | (ff.) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (gcast v (list T) (list T) L) | (nill T) | (tt.)

%

T ~ T.
contains e e.
ground_of T G.
e --> e.
Gamma |- e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-BOOL]
--------------------------------------
(bool.) ~ (bool.).

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-LIST]
T ~ T'
--------------------------------------
(list T) ~ (list T').

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[CONTAINS-APP-0]
contains e4 e3
--------------------------------------
contains (app e4 e) e3.

[CONTAINS-APP-1]
contains e6 e5
--------------------------------------
contains (app v e6) e5.

[CONTAINS-CONS-2]
contains e8 e7
--------------------------------------
contains (cons T e8 e) e7.

[CONTAINS-CONS-3]
contains e10 e9
--------------------------------------
contains (cons T v e10) e9.

[CONTAINS-E]
--------------------------------------
contains e e.

[CONTAINS-GCAST-4]
contains e12 e11
--------------------------------------
contains (gcast e12 T1 T2 L) e11.

[CONTAINS-HEAD-5]
contains e14 e13
--------------------------------------
contains (head T e14) e13.

[CONTAINS-IS_NIL-7]
contains e16 e15
--------------------------------------
contains (is_nil T e16) e15.

[CONTAINS-TAIL-8]
contains e18 e17
--------------------------------------
contains (tail T e18) e17.

[GROUND-OF-ARROW]
--------------------------------------
ground_of (arrow T1 T2) (arrow (dyn.) (dyn.)).

[GROUND-OF-BOOL]
--------------------------------------
ground_of (bool.) (bool.).

[GROUND-OF-LIST]
--------------------------------------
ground_of (list T) (list (dyn.)).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-BLAME]
nil |- e : T1,
contains e (blame T2 L),
not(e = (blame T2 L))
--------------------------------------
e --> (blame T1 L).

[R-ELIM-GCAST-APP]
--------------------------------------
(app (gcast v3 (arrow T1' T2') (arrow T1 T2) L) v) --> (gcast (app v3 (gcast v T1 T1' L)) T2' T2 L).

[R-ELIM-GCAST-HEAD]
--------------------------------------
(head T (gcast v4 (list T') (list T) L)) --> (gcast (head T' v4) T' T L).

[R-ELIM-GCAST-IS_NIL]
--------------------------------------
(is_nil T (gcast v5 (list T') (list T) L)) --> (is_nil T' v5).

[R-ELIM-GCAST-TAIL]
--------------------------------------
(tail T (gcast v6 (list T') (list T) L)) --> (gcast (tail T' v6) (list T') (list T) L).

[R-GCAST-ARROW]
--------------------------------------
(gcast v (arrow T1 T2) (arrow T1 T2) L) --> v.

[R-GCAST-DYN-TO-T]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v (dyn.) T L) --> (gcast (gcast v (dyn.) G L) G T L).

[R-GCAST-GCAST-ERROR]
not(G1 = G2)
--------------------------------------
(gcast (gcast v G1 (dyn.) L1) (dyn.) G2 L2) --> (blame G2 L2).

[R-GCAST-GCAST-OK]
--------------------------------------
(gcast (gcast v G (dyn.) L1) (dyn.) G L2) --> v.

[R-GCAST-LIST]
--------------------------------------
(gcast v (list T) (list T) L) --> v.

[R-GCAST-T-TO-DYN]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v T (dyn.) L) --> (gcast (gcast v T G L) G (dyn.) L).

[R-HEAD-CONS]
--------------------------------------
(head T (cons T v1 v2)) --> v1.

[R-IS-NIL-FALSE]
--------------------------------------
(is_nil T (cons T v1 v2)) --> (ff.).

[R-IS-NIL-TRUE]
--------------------------------------
(is_nil T (nill T)) --> (tt.).

[R-TAIL-CONS]
--------------------------------------
(tail T (cons T v1 v2)) --> v2.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-BLAME]
--------------------------------------
Gamma |- (blame T L) : T.

[T-CONS]
Gamma |- e1 : T,
Gamma |- e2 : (list T)
--------------------------------------
Gamma |- (cons T e1 e2) : (list T).

[T-FALSE]
--------------------------------------
Gamma |- (ff.) : (bool.).

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-HEAD]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (head T e) : T.

[T-IS-NIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (is_nil T e) : (bool.).

[T-NIL]
--------------------------------------
Gamma |- (nill T) : (list T).

[T-TAIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (tail T e) : (list T).

[T-TRUE]
--------------------------------------
Gamma |- (tt.) : (bool.).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

%

eliminationform: app => 0 | head => 1 | is_nil => 1 | tail => 1.
mode: consistent => inp inp | contains => inp inp | ground_of => inp out | step => inp out | typeof => inp inp out.
principal: consistent => yes yes | contains => yes no | ground_of => yes no | step => yes no | typeof => no yes no.
variance: arrow => contra cov | list => cov.
