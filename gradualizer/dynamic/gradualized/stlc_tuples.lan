Context E ::= (app E e) | (app v E) | (gcast E T T L) | (hole.) | (select1 E) | (select2 E) | (select3 E) | (select4 E) | (tuple E e e e) | (tuple v E e e) | (tuple v v E e) | (tuple v v v E)
Environment Gamma ::= [<x, T>...]
Error er ::= (blame T L)
Expression e ::= x | (abs T (x)e) | (app e e) | (blame T L) | (gcast e T T L) | (select1 e) | (select2 e) | (select3 e) | (select4 e) | (tuple e e e e) | (zero.)
Ground G ::= (arrow (dyn.) (dyn.)) | (nat.) | (tupleT (dyn.) (dyn.) (dyn.) (dyn.))
Type T ::= (arrow T T) | (dyn.) | (nat.) | (tupleT T T T T)
Value v ::= (abs T (x)e) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (gcast v (tupleT T T T T) (tupleT T T T T) L) | (tuple v v v v) | (zero.)

%

T ~ T.
contains e e.
ground_of T G.
e --> e.
Gamma |- e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-NAT]
--------------------------------------
(nat.) ~ (nat.).

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[C-TUPLET]
T1 ~ T1',
T2 ~ T2',
T3 ~ T3',
T4 ~ T4'
--------------------------------------
(tupleT T1 T2 T3 T4) ~ (tupleT T1' T2' T3' T4').

[CONTAINS-APP-0]
contains e6 e5
--------------------------------------
contains (app e6 e) e5.

[CONTAINS-APP-1]
contains e8 e7
--------------------------------------
contains (app v e8) e7.

[CONTAINS-E]
--------------------------------------
contains e e.

[CONTAINS-GCAST-2]
contains e10 e9
--------------------------------------
contains (gcast e10 T1 T2 L) e9.

[CONTAINS-SELECT1-4]
contains e12 e11
--------------------------------------
contains (select1 e12) e11.

[CONTAINS-SELECT2-5]
contains e14 e13
--------------------------------------
contains (select2 e14) e13.

[CONTAINS-SELECT3-6]
contains e16 e15
--------------------------------------
contains (select3 e16) e15.

[CONTAINS-SELECT4-7]
contains e18 e17
--------------------------------------
contains (select4 e18) e17.

[CONTAINS-TUPLE-10]
contains e24 e23
--------------------------------------
contains (tuple v1 v2 e24 e) e23.

[CONTAINS-TUPLE-11]
contains e26 e25
--------------------------------------
contains (tuple v1 v2 v3 e26) e25.

[CONTAINS-TUPLE-8]
contains e20 e19
--------------------------------------
contains (tuple e20 e1 e2 e3) e19.

[CONTAINS-TUPLE-9]
contains e22 e21
--------------------------------------
contains (tuple v e22 e1 e2) e21.

[GROUND-OF-ARROW]
--------------------------------------
ground_of (arrow T1 T2) (arrow (dyn.) (dyn.)).

[GROUND-OF-NAT]
--------------------------------------
ground_of (nat.) (nat.).

[GROUND-OF-TUPLET]
--------------------------------------
ground_of (tupleT T1 T2 T3 T4) (tupleT (dyn.) (dyn.) (dyn.) (dyn.)).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-BLAME]
nil |- e : T1,
contains e (blame T2 L),
not(e = (blame T2 L))
--------------------------------------
e --> (blame T1 L).

[R-ELIM-GCAST-APP]
--------------------------------------
(app (gcast v5 (arrow T1' T2') (arrow T1 T2) L) v) --> (gcast (app v5 (gcast v T1 T1' L)) T2' T2 L).

[R-ELIM-GCAST-SELECT1]
--------------------------------------
(select1 (gcast v6 (tupleT T1' T2' T3' T4') (tupleT T1 T2 T3 T4) L)) --> (gcast (select1 v6) T1' T1 L).

[R-ELIM-GCAST-SELECT2]
--------------------------------------
(select2 (gcast v7 (tupleT T1' T2' T3' T4') (tupleT T1 T2 T3 T4) L)) --> (gcast (select2 v7) T2' T2 L).

[R-ELIM-GCAST-SELECT3]
--------------------------------------
(select3 (gcast v8 (tupleT T1' T2' T3' T4') (tupleT T1 T2 T3 T4) L)) --> (gcast (select3 v8) T3' T3 L).

[R-ELIM-GCAST-SELECT4]
--------------------------------------
(select4 (gcast v9 (tupleT T1' T2' T3' T4') (tupleT T1 T2 T3 T4) L)) --> (gcast (select4 v9) T4' T4 L).

[R-GCAST-ARROW]
--------------------------------------
(gcast v (arrow T1 T2) (arrow T1 T2) L) --> v.

[R-GCAST-DYN-TO-T]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v (dyn.) T L) --> (gcast (gcast v (dyn.) G L) G T L).

[R-GCAST-GCAST-ERROR]
not(G1 = G2)
--------------------------------------
(gcast (gcast v G1 (dyn.) L1) (dyn.) G2 L2) --> (blame G2 L2).

[R-GCAST-GCAST-OK]
--------------------------------------
(gcast (gcast v G (dyn.) L1) (dyn.) G L2) --> v.

[R-GCAST-T-TO-DYN]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v T (dyn.) L) --> (gcast (gcast v T G L) G (dyn.) L).

[R-GCAST-TUPLET]
--------------------------------------
(gcast v (tupleT T1 T2 T3 T4) (tupleT T1 T2 T3 T4) L) --> v.

[R-SELECT1]
--------------------------------------
(select1 (tuple v1 v2 v3 v4)) --> v1.

[R-SELECT2]
--------------------------------------
(select2 (tuple v1 v2 v3 v4)) --> v2.

[R-SELECT3]
--------------------------------------
(select3 (tuple v1 v2 v3 v4)) --> v3.

[R-SELECT4]
--------------------------------------
(select4 (tuple v1 v2 v3 v4)) --> v4.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-BLAME]
--------------------------------------
Gamma |- (blame T L) : T.

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-SELECT1]
Gamma |- e : (tupleT T1 T2 T3 T4)
--------------------------------------
Gamma |- (select1 e) : T1.

[T-SELECT2]
Gamma |- e : (tupleT T1 T2 T3 T4)
--------------------------------------
Gamma |- (select2 e) : T2.

[T-SELECT3]
Gamma |- e : (tupleT T1 T2 T3 T4)
--------------------------------------
Gamma |- (select3 e) : T3.

[T-SELECT4]
Gamma |- e : (tupleT T1 T2 T3 T4)
--------------------------------------
Gamma |- (select4 e) : T4.

[T-TUPLE]
Gamma |- e1 : T1,
Gamma |- e2 : T2,
Gamma |- e3 : T3,
Gamma |- e4 : T4
--------------------------------------
Gamma |- (tuple e1 e2 e3 e4) : (tupleT T1 T2 T3 T4).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

[T-ZERO]
--------------------------------------
Gamma |- (zero.) : (nat.).

%

eliminationform: app => 0 | select1 => 0 | select2 => 0 | select3 => 0 | select4 => 0.
mode: consistent => inp inp | contains => inp inp | ground_of => inp out | step => inp out | typeof => inp inp out.
principal: consistent => yes yes | contains => yes no | ground_of => yes no | step => yes no | typeof => no yes no.
variance: arrow => contra cov | tupleT => cov cov cov cov.
