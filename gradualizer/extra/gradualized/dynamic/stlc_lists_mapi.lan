Context E ::= (app E e) | (app v E) | (cons T E e) | (cons T v E) | (gcast E T T L) | (head T E) | (hole.) | (is_nil T E) | (mapi T E e e) | (mapi T v E e) | (mapi T v v E) | (succ E) | (tail T E)
Environment Gamma ::= [<x, T>...]
Error er ::= (blame T L)
Expression e ::= x | (abs T (x)e) | (app e e) | (blame T L) | (cons T e e) | (ff.) | (gcast e T T L) | (head T e) | (is_nil T e) | (mapi T e e e) | (nill T) | (succ e) | (tail T e) | (tt.) | (zero.)
Ground G ::= (arrow (dyn.) (dyn.)) | (bool.) | (list (dyn.)) | (nat.)
Type T ::= (arrow T T) | (bool.) | (dyn.) | (list T) | (nat.)
Value v ::= (abs T (x)e) | (cons T v v) | (ff.) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (gcast v (list T) (list T) L) | (nill T) | (succ v) | (tt.) | (zero.)

%

T ~ T.
contains e e.
ground_of T G.
e --> e.
Gamma |- e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-BOOL]
--------------------------------------
(bool.) ~ (bool.).

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-LIST]
T ~ T'
--------------------------------------
(list T) ~ (list T').

[C-NAT]
--------------------------------------
(nat.) ~ (nat.).

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[CONTAINS-APP-0]
contains e5 e4
--------------------------------------
contains (app e5 e) e4.

[CONTAINS-APP-1]
contains e7 e6
--------------------------------------
contains (app v e7) e6.

[CONTAINS-CONS-2]
contains e9 e8
--------------------------------------
contains (cons T e9 e) e8.

[CONTAINS-CONS-3]
contains e11 e10
--------------------------------------
contains (cons T v e11) e10.

[CONTAINS-E]
--------------------------------------
contains e e.

[CONTAINS-GCAST-4]
contains e13 e12
--------------------------------------
contains (gcast e13 T1 T2 L) e12.

[CONTAINS-HEAD-5]
contains e15 e14
--------------------------------------
contains (head T e15) e14.

[CONTAINS-IS_NIL-7]
contains e17 e16
--------------------------------------
contains (is_nil T e17) e16.

[CONTAINS-MAPI-10]
contains e23 e22
--------------------------------------
contains (mapi T v1 v2 e23) e22.

[CONTAINS-MAPI-8]
contains e19 e18
--------------------------------------
contains (mapi T e19 e1 e2) e18.

[CONTAINS-MAPI-9]
contains e21 e20
--------------------------------------
contains (mapi T v e21 e) e20.

[CONTAINS-SUCC-11]
contains e25 e24
--------------------------------------
contains (succ e25) e24.

[CONTAINS-TAIL-12]
contains e27 e26
--------------------------------------
contains (tail T e27) e26.

[GROUND-OF-ARROW]
--------------------------------------
ground_of (arrow T1 T2) (arrow (dyn.) (dyn.)).

[GROUND-OF-BOOL]
--------------------------------------
ground_of (bool.) (bool.).

[GROUND-OF-LIST]
--------------------------------------
ground_of (list T) (list (dyn.)).

[GROUND-OF-NAT]
--------------------------------------
ground_of (nat.) (nat.).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-BLAME]
nil |- e : T1,
contains e (blame T2 L),
not(e = (blame T2 L))
--------------------------------------
e --> (blame T1 L).

[R-ELIM-GCAST-APP]
--------------------------------------
(app (gcast v5 (arrow T1' T2') (arrow T1 T2) L) v) --> (gcast (app v5 (gcast v T1 T1' L)) T2' T2 L).

[R-ELIM-GCAST-HEAD]
--------------------------------------
(head T (gcast v6 (list T') (list T) L)) --> (gcast (head T' v6) T' T L).

[R-ELIM-GCAST-IS_NIL]
--------------------------------------
(is_nil T (gcast v7 (list T') (list T) L)) --> (is_nil T' v7).

[R-ELIM-GCAST-MAPI]
--------------------------------------
(mapi T2 (gcast v8 (list T1') (list T1) L) v3 v4) --> (mapi T2 v8 (gcast v3 (arrow T1 (arrow (nat.) T2)) (arrow T1' (arrow (nat.) T2)) L) v4).

[R-ELIM-GCAST-TAIL]
--------------------------------------
(tail T (gcast v9 (list T') (list T) L)) --> (gcast (tail T' v9) (list T') (list T) L).

[R-GCAST-ARROW]
--------------------------------------
(gcast v (arrow T1 T2) (arrow T1 T2) L) --> v.

[R-GCAST-DYN-TO-T]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v (dyn.) T L) --> (gcast (gcast v (dyn.) G L) G T L).

[R-GCAST-GCAST-ERROR]
not(G1 = G2)
--------------------------------------
(gcast (gcast v G1 (dyn.) L1) (dyn.) G2 L2) --> (blame G2 L2).

[R-GCAST-GCAST-OK]
--------------------------------------
(gcast (gcast v G (dyn.) L1) (dyn.) G L2) --> v.

[R-GCAST-LIST]
--------------------------------------
(gcast v (list T) (list T) L) --> v.

[R-GCAST-T-TO-DYN]
ground_of T G,
not(T = G)
--------------------------------------
(gcast v T (dyn.) L) --> (gcast (gcast v T G L) G (dyn.) L).

[R-HEAD-CONS]
--------------------------------------
(head T (cons T v1 v2)) --> v1.

[R-IS-NIL-FALSE]
--------------------------------------
(is_nil T (cons T v1 v2)) --> (ff.).

[R-IS-NIL-TRUE]
--------------------------------------
(is_nil T (nill T)) --> (tt.).

[R-MAPI-CONS]
--------------------------------------
(mapi T2 (cons T1 v1 v2) v3 v4) --> (cons T2 (app (app v3 v1) v4) (map T2 v2 v3 (succ v4))).

[R-MAPI-NIL]
--------------------------------------
(mapi T2 (nill T1) v1 v2) --> (nill T2).

[R-TAIL-CONS]
--------------------------------------
(tail T (cons T v1 v2)) --> v2.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-BLAME]
--------------------------------------
Gamma |- (blame T L) : T.

[T-CONS]
Gamma |- e1 : T,
Gamma |- e2 : (list T)
--------------------------------------
Gamma |- (cons T e1 e2) : (list T).

[T-FALSE]
--------------------------------------
Gamma |- (ff.) : (bool.).

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-HEAD]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (head T e) : T.

[T-IS-NIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (is_nil T e) : (bool.).

[T-MAPI]
Gamma |- e1 : (list T1),
Gamma |- e2 : (arrow T1 (arrow (nat.) T2)),
Gamma |- e3 : (nat.)
--------------------------------------
Gamma |- (mapi T2 e1 e2 e3) : (list T2).

[T-NIL]
--------------------------------------
Gamma |- (nill T) : (list T).

[T-SUCC]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (succ e) : (nat.).

[T-TAIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (tail T e) : (list T).

[T-TRUE]
--------------------------------------
Gamma |- (tt.) : (bool.).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

[T-ZERO]
--------------------------------------
Gamma |- (zero.) : (nat.).

%

eliminationform: app => 0 | head => 1 | is_nil => 1 | mapi => 1 | tail => 1.
mode: consistent => inp inp | contains => inp inp | ground_of => inp out | step => inp out | typeof => inp inp out.
principal: consistent => yes yes | contains => yes no | ground_of => yes no | step => yes no | typeof => no yes no.
variance: arrow => contra cov | list => cov.
