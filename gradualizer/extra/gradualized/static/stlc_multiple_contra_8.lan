Context E ::= (app E e) | (app v E) | (app8 E e e) | (app8 v E e) | (app8 v v E) | (fst E) | (hole.) | (pair E e) | (pair v E) | (snd E)
Environment Gamma ::= [<x, T>...]
Expression e ::= x | (abs T (x)e) | (app e e) | (app8 e e e) | (ff.) | (fst e) | (gcast e T T L) | (pair e e) | (snd e) | (tt.)
Ground G ::= (arrow (dyn.) (dyn.)) | (bool.) | (times (dyn.) (dyn.))
Type T ::= (arrow T T) | (bool.) | (dyn.) | (times T T)
Value v ::= (abs T (x)e) | (ff.) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (gcast v (times T T) (times T T) L) | (pair v v) | (tt.)

%

T ~ T.
gjoin T T T.
matches T T.
static T.
e --> e.
Gamma |- e : T.
Gamma |- e ==> e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-BOOL]
--------------------------------------
(bool.) ~ (bool.).

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[C-TIMES]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(times T1 T2) ~ (times T1' T2').

[CC-T-ABS]
[x => T1]Gamma |- e ==> e' : T2
--------------------------------------
Gamma |- (abs T1 (x)e) ==> (abs T1 (x)e') : (arrow T1 T2).

[CC-T-APP]
Gamma |- e1 ==> e1' : M1,
matches M1 (arrow T1_1 T2),
Gamma |- e2 ==> e2' : T1_2,
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) ==> (app (gcast e1' M1 (arrow T1_1 T2) L1) (gcast e2' T1_2 T1_1 L2)) : T2.

[CC-T-APP8]
Gamma |- e1 ==> e1' : M4,
matches M4 (arrow T1_1 M3),
matches M3 (arrow T2_1 M2),
matches M2 (arrow T1_2 T2_2),
Gamma |- e2 ==> e2' : T1_3,
Gamma |- e3 ==> e3' : M5,
matches M5 (pair T1_4 T2_3),
T1_3 ~ T1_1,
T1_4 ~ T1_2,
T2_2 ~ T2_1,
T2_3 ~ T2_1
--------------------------------------
Gamma |- (app8 e1 e2 e3) ==> (app8 (gcast e1' M4 (arrow T1_1 (arrow T2_1 (arrow T1_2 T2_1))) L3) (gcast e2' T1_3 T1_1 L4) (gcast e3' M5 (pair T1_2 T2_1) L5)) : T2_2.

[CC-T-FALSE]
--------------------------------------
Gamma |- (ff.) ==> (ff.) : (bool.).

[CC-T-FST]
Gamma |- e ==> e' : M6,
matches M6 (times T1 T2)
--------------------------------------
Gamma |- (fst e) ==> (fst (gcast e' M6 (times T1 T2) L6)) : T1.

[CC-T-PAIR]
Gamma |- e1 ==> e1' : T1,
Gamma |- e2 ==> e2' : T2
--------------------------------------
Gamma |- (pair e1 e2) ==> (pair e1' e2') : (times T1 T2).

[CC-T-SND]
Gamma |- e ==> e' : M7,
matches M7 (times T1 T2)
--------------------------------------
Gamma |- (snd e) ==> (snd (gcast e' M7 (times T1 T2) L7)) : T2.

[CC-T-TRUE]
--------------------------------------
Gamma |- (tt.) ==> (tt.) : (bool.).

[CC-T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x ==> x : T.

[GJOIN-ARROW]
gjoin T1 T1' T1'',
gjoin T2 T2' T2''
--------------------------------------
gjoin (arrow T1 T2) (arrow T1' T2') (arrow T1'' T2'').

[GJOIN-BOOL]
--------------------------------------
gjoin (bool.) (bool.) (bool.).

[GJOIN-DYN-T]
--------------------------------------
gjoin (dyn.) T T.

[GJOIN-T-DYN]
--------------------------------------
gjoin T (dyn.) T.

[GJOIN-TIMES]
gjoin T1 T1' T1'',
gjoin T2 T2' T2''
--------------------------------------
gjoin (times T1 T2) (times T1' T2') (times T1'' T2'').

[MATCHES-ARROW]
--------------------------------------
matches (arrow T1 T2) (arrow T1 T2).

[MATCHES-BOOL]
--------------------------------------
matches (bool.) (bool.).

[MATCHES-DYN-ARROW]
--------------------------------------
matches (dyn.) (arrow (dyn.) (dyn.)).

[MATCHES-DYN-BOOL]
--------------------------------------
matches (dyn.) (bool.).

[MATCHES-DYN-TIMES]
--------------------------------------
matches (dyn.) (times (dyn.) (dyn.)).

[MATCHES-TIMES]
--------------------------------------
matches (times T1 T2) (times T1 T2).

[R-APP8]
--------------------------------------
(app8 v1 v2 v3) --> (app (app (app v1 v2) (snd v3)) (fst v3)).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-FST]
--------------------------------------
(fst (pair v1 v2)) --> v1.

[R-SND]
--------------------------------------
(snd (pair v1 v2)) --> v2.

[STATIC-ARROW]
static T1,
static T2
--------------------------------------
static (arrow T1 T2).

[STATIC-BOOL]
--------------------------------------
static (bool.).

[STATIC-TIMES]
static T1,
static T2
--------------------------------------
static (times T1 T2).

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : M1,
matches M1 (arrow T1_1 T2),
Gamma |- e2 : T1_2,
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-APP8]
Gamma |- e1 : M4,
matches M4 (arrow T1_1 M3),
matches M3 (arrow T2_1 M2),
matches M2 (arrow T1_2 T2_2),
Gamma |- e2 : T1_3,
Gamma |- e3 : M5,
matches M5 (pair T1_4 T2_3),
T1_3 ~ T1_1,
T1_4 ~ T1_2,
T2_2 ~ T2_1,
T2_3 ~ T2_1
--------------------------------------
Gamma |- (app8 e1 e2 e3) : T2_2.

[T-FALSE]
--------------------------------------
Gamma |- (ff.) : (bool.).

[T-FST]
Gamma |- e : M6,
matches M6 (times T1 T2)
--------------------------------------
Gamma |- (fst e) : T1.

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-PAIR]
Gamma |- e1 : T1,
Gamma |- e2 : T2
--------------------------------------
Gamma |- (pair e1 e2) : (times T1 T2).

[T-SND]
Gamma |- e : M7,
matches M7 (times T1 T2)
--------------------------------------
Gamma |- (snd e) : T2.

[T-TRUE]
--------------------------------------
Gamma |- (tt.) : (bool.).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

%

eliminationform: app => 0 | app8 => 0 | fst => 0 | snd => 0.
flows: app8 => [e1, 0, e2, 0] [e1, 1, e3, 1] [e1, 2, e3, 0] [T2, c, 0, e1, 3].
mode: consistent => inp inp | gjoin => inp inp out | matches => inp out | static => inp | step => inp out | typeof => inp inp out | typeof_cc => inp inp out out.
principal: consistent => yes yes | gjoin => yes yes no | matches => yes no | static => yes | step => yes no | typeof => no yes no | typeof_cc => no yes no no.
variance: arrow => contra cov.
