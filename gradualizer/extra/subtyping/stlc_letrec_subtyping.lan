Context E ::= (app E e) | (app v E) | (cast E T) | (hole.) | (let E (x)e)
Environment Gamma ::= [<x, T>...]
Expression e ::= x | (abs T (x)e) | (app e e) | (cast e T) | (let e (x)e) | (letrec T (x)e (x)e)
Type T ::= (arrow T T) | (bot.) | (top.)
Value v ::= (abs T (x)e)

%

join T T T.
meet T T T.
e --> e.
T <: T.
Gamma |- e : T.

%

[JOIN-ARROW]
meet T1 T3 T5,
join T2 T4 T6
--------------------------------------
join (arrow T1 T2) (arrow T3 T4) (arrow T5 T6).

[JOIN-ARROW-BOT]
--------------------------------------
join (arrow T1 T2) (bot.) (arrow T1 T2).

[JOIN-ARROW-TOP]
--------------------------------------
join (arrow T1 T2) (top.) (top.).

[JOIN-BOT]
--------------------------------------
join (bot.) (bot.) (bot.).

[JOIN-BOT-ARROW]
--------------------------------------
join (bot.) (arrow T1 T2) (arrow T1 T2).

[JOIN-BOT-TOP]
--------------------------------------
join (bot.) (top.) (top.).

[JOIN-TOP]
--------------------------------------
join (top.) (top.) (top.).

[JOIN-TOP-ARROW]
--------------------------------------
join (top.) (arrow T1 T2) (top.).

[JOIN-TOP-BOT]
--------------------------------------
join (top.) (bot.) (top.).

[MEET-ARROW]
join T1 T7 T9,
meet T2 T8 T10
--------------------------------------
meet (arrow T1 T2) (arrow T7 T8) (arrow T9 T10).

[MEET-ARROW-BOT]
--------------------------------------
meet (arrow T1 T2) (bot.) (bot.).

[MEET-ARROW-TOP]
--------------------------------------
meet (arrow T1 T2) (top.) (arrow T1 T2).

[MEET-BOT]
--------------------------------------
meet (bot.) (bot.) (bot.).

[MEET-BOT-ARROW]
--------------------------------------
meet (bot.) (arrow T1 T2) (bot.).

[MEET-BOT-TOP]
--------------------------------------
meet (bot.) (top.) (bot.).

[MEET-TOP]
--------------------------------------
meet (top.) (top.) (top.).

[MEET-TOP-ARROW]
--------------------------------------
meet (top.) (arrow T1 T2) (arrow T1 T2).

[MEET-TOP-BOT]
--------------------------------------
meet (top.) (bot.) (bot.).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-CAST]
--------------------------------------
(cast v T) --> v.

[R-LET]
--------------------------------------
(let v (x)e) --> e{v/x}.

[R-LETREC]
--------------------------------------
(letrec T (x)e1 (x)e2) --> (let (fix (abs T (x)e1)) (x)e2).

[S-ARROW]
T11 <: T1,
T2 <: T12
--------------------------------------
(arrow T1 T2) <: (arrow T11 T12).

[S-BOT]
--------------------------------------
(bot.) <: (bot.).

[S-BOT-ARROW]
--------------------------------------
(bot.) <: (arrow T1 T2).

[S-BOT-BOT]
--------------------------------------
(bot.) <: (bot.).

[S-BOT-TOP]
--------------------------------------
(bot.) <: (top.).

[S-TOP]
--------------------------------------
(top.) <: (top.).

[S-TOP-ARROW]
--------------------------------------
(arrow T1 T2) <: (top.).

[S-TOP-BOT]
--------------------------------------
(bot.) <: (top.).

[S-TOP-TOP]
--------------------------------------
(top.) <: (top.).

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1_1 T2),
Gamma |- e2 : T1_2,
T1_2 <: T1_1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-CAST]
Gamma |- e : T1,
T1 <: T2
--------------------------------------
Gamma |- (cast e T2) : T2.

[T-LET]
Gamma |- e1 : T1,
[x => T1]Gamma |- e2 : T2
--------------------------------------
Gamma |- (let e1 (x)e2) : T2.

[T-LETREC]
[x => T1]Gamma |- e1 : T1,
[x => T1]Gamma |- e2 : T2
--------------------------------------
Gamma |- (letrec T1 (x)e1 (x)e2) : T2.

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

%

eliminationform: app => 0.
mode: join => inp inp out | meet => inp inp out | step => inp out | subtype => inp inp | |- => inp inp out.
principal: join => yes yes no | meet => yes yes no | step => yes no | subtype => yes yes | |- => no yes no.
variance: arrow => contra cov.
