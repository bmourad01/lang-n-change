Context E ::= (app E e) | (app v E) | (append E e) | (append v E) | (cast E T) | (cons T E e) | (cons T v E) | (head T E) | (hole.) | (is_nil T E) | (rangee E) | (reverse E) | (reverse_range E) | (succ E) | (tail T E)
Environment Gamma ::= [<x, T>...]
Expression e ::= x | (abs T (x)e) | (app e e) | (append e e) | (cast e T) | (cons T e e) | (ff.) | (head T e) | (is_nil T e) | (nill T) | (rangee e) | (reverse e) | (reverse_range e) | (succ e) | (tail T e) | (tt.) | (zero.)
Type T ::= (arrow T T) | (bool.) | (list T) | (nat.)
Value v ::= (abs T (x)e) | (cons T v v) | (ff.) | (nill T) | (succ v) | (tt.) | (zero.)

%

join T T T.
meet T T T.
e --> e.
T <: T.
Gamma |- e : T.

%

[JOIN-ARROW]
meet T1 T3 T5,
join T2 T4 T6
--------------------------------------
join (arrow T1 T2) (arrow T3 T4) (arrow T5 T6).

[JOIN-BOOL]
--------------------------------------
join (bool.) (bool.) (bool.).

[JOIN-LIST]
join T T7 T8
--------------------------------------
join (list T) (list T7) (list T8).

[JOIN-NAT]
--------------------------------------
join (nat.) (nat.) (nat.).

[MEET-ARROW]
join T1 T9 T11,
meet T2 T10 T12
--------------------------------------
meet (arrow T1 T2) (arrow T9 T10) (arrow T11 T12).

[MEET-BOOL]
--------------------------------------
meet (bool.) (bool.) (bool.).

[MEET-LIST]
meet T T13 T14
--------------------------------------
meet (list T) (list T13) (list T14).

[MEET-NAT]
--------------------------------------
meet (nat.) (nat.) (nat.).

[R-APPEND-CONS]
--------------------------------------
(append (cons T v1 v2) v3) --> (cons T v1 (append v2 v3)).

[R-APPEND-NIL]
--------------------------------------
(append (nill T) v) --> v.

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-CAST]
--------------------------------------
(cast v T) --> v.

[R-HEAD-CONS]
--------------------------------------
(head T (cons T v1 v2)) --> v1.

[R-IS-NIL-FALSE]
--------------------------------------
(is_nil T (cons T v1 v2)) --> (ff.).

[R-IS-NIL-TRUE]
--------------------------------------
(is_nil T (nill T)) --> (tt.).

[R-RANGE]
--------------------------------------
(rangee v) --> (reverse (reverse_range v)).

[R-REVERSE-CONS]
--------------------------------------
(reverse (cons T v1 v2)) --> (append (reverse v2) (cons T v1 (nill T))).

[R-REVERSE-NIL]
--------------------------------------
(reverse (nill T)) --> (nill T).

[R-REVERSE-RANGE-SUCC]
--------------------------------------
(reverse_range (succ v)) --> (cons (succ v) (reverse_range v)).

[R-REVERSE-RANGE-ZERO]
--------------------------------------
(reverse_range (zero.)) --> (nill (nat.)).

[R-TAIL-CONS]
--------------------------------------
(tail T (cons T v1 v2)) --> v2.

[S-ARROW]
T15 <: T1,
T2 <: T16
--------------------------------------
(arrow T1 T2) <: (arrow T15 T16).

[S-BOOL]
--------------------------------------
(bool.) <: (bool.).

[S-LIST]
T <: T17
--------------------------------------
(list T) <: (list T17).

[S-NAT]
--------------------------------------
(nat.) <: (nat.).

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1_1 T2),
Gamma |- e2 : T1_2,
T1_2 <: T1_1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-APPEND]
Gamma |- e1 : (list T_1),
Gamma |- e2 : (list T_2),
join T_1 T_2 T
--------------------------------------
Gamma |- (append e1 e2) : (list T).

[T-CAST]
Gamma |- e : T1,
T1 <: T2
--------------------------------------
Gamma |- (cast e T2) : T2.

[T-CONS]
Gamma |- e1 : T_1,
Gamma |- e2 : (list T_2),
join T_1 T_2 T
--------------------------------------
Gamma |- (cons T e1 e2) : (list T).

[T-FALSE]
--------------------------------------
Gamma |- (ff.) : (bool.).

[T-HEAD]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (head T e) : T.

[T-IS-NIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (is_nil T e) : (bool.).

[T-NIL]
--------------------------------------
Gamma |- (nill T) : (list T).

[T-RANGE]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (rangee e) : (list (nat.)).

[T-REVERSE]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (reverse e) : (list T).

[T-REVERSE-RANGE]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (reverse_range e) : (list (nat.)).

[T-SUCC]
Gamma |- e : (nat.)
--------------------------------------
Gamma |- (succ e) : (nat.).

[T-TAIL]
Gamma |- e : (list T)
--------------------------------------
Gamma |- (tail T e) : (list T).

[T-TRUE]
--------------------------------------
Gamma |- (tt.) : (bool.).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

[T-ZERO]
--------------------------------------
Gamma |- (zero.) : (nat.).

%

eliminationform: app => 0 | append => 0 | head => 1 | is_nil => 1 | rangee => 0 | reverse => 0 | reverse_range => 0 | tail => 1.
mode: join => inp inp out | meet => inp inp out | step => inp out | subtype => inp inp | typeof => inp inp out.
principal: join => yes yes no | meet => yes yes no | step => yes no | subtype => yes yes | typeof => no yes no.
variance: arrow => contra cov | list => cov.
