(* add the cast operator and the dynamic type *)
Expression e ::= ... | ("gcast" [$e, $T, $T]).;
Type T ::= ... | ("dyn" []).;

Value v ::= {
  let casts = Type[`(c ts)` when not(empty?(ts))]:
    ("cast" [$v, (c ts), (c ts)])
  in
  Value @ casts @ [("cast" [$v, $G, ("dyn" [])]).]
};

(* add ground types *)
Ground G ::= {
  Type[`(c ts)` when not(c = "dyn")]:
    let dyns = ts[`t`]: if binding?(t) then t else ("dyn" []) in
    some((c dyns))
};
    
(* define the consistency, pattern-matching, join, and static relations *)
add_relation($T ~ $T);
add_relation("matches", [$T, $T]);
add_relation("gjoin", [$T, $T, $T]);
add_relation("static", [$T.]);

# mode: ... | consistent => inp inp | matches => inp out | gjoin => inp inp out | static => inp;
# principal: ... | consistent => yes yes | matches => yes no | gjoin => yes yes no | static => yes;
    
add_rules(Type[`(c ts)`]:
  ["C-" ^ uppercase(c)] {
    ts[`t`]: unbind(t) ~ unbind(t)'
    -------------------------------
    (c ts) ~ (c ts')
  }
);

add_rule(["C-T-DYN"] {
  ----------------
  $T ~ ("dyn" [])
});
    
add_rule(["C-DYN-T"] {
  ----------------
  ("dyn" []) ~ $T
});

add_rules(Type[`(c ts)` when not(c = "dyn")]: 
  let ts = ts[`t`]: if binding?(t) then $(bound(t))("dyn" []) else ("dyn" []) in
  ["MATCHES-DYN-" ^ uppercase(c)] {
    ---------------------------------
    &("matches" [("dyn" []), (c ts)])
  }
);

add_rules(Type[`(c ts)` when not(c = "dyn")]:
  ["MATCHES-" ^ uppercase(c)] {
    -----------------------------
    &("matches" [(c ts), (c ts)])
  }
);

add_rules(Type[`(c ts)` when not(c = "dyn")]:
  ["STATIC-" ^ uppercase(c)] {
    ts[`t`]: &("static" [t.])
    ----------------------------
    &("static" [(c ts).])
  }
);

add_rules(Type[`(c ts)` when not(c = "dyn")]:
  ["GJOIN-" ^ uppercase(c)] {
    ts[`t`]:
      let t = unbind(t) in
      &("gjoin" [t, t', t''])
    -------------------------------------
    &("gjoin" [(c ts), (c ts'), (c ts'')])
  }
);

add_rule(["GJOIN-T-DYN"] {
  ------------------------------
  &("gjoin" [$T, ("dyn" []), $T])
});
    
add_rule(["GJOIN-DYN-T"] {
  ------------------------------
  &("gjoin" [("dyn" []), $T, $T])
});

(* check if the language has subtyping *)
let has_subtyping =
  let has_relation (r: string) =
    not(empty?(relations[`(name, _)` when r = name]: self))
  in
  has_relation("subtype")
  && has_relation("join")
  && has_relation("meet")
in

(if has_subtyping then (
  (* we use the 'subtype_flow' relation instead *)
  remove_relation("subtype");
  remove_hint("mode", "subtype");
  remove_hint("principal", "subtype");
  
  (* change the shape of subtype/join/meet relations *)
  lift t1 <: t2 to t1 <: t2 ==> t1' t2'.;
  lift &("join" [t1, t2, t3]) to &("join" [t1, t2, t3, t1', t2']).;
  lift &("meet" [t1, t2, t3]) to &("meet" [t1, t2, t3, t1', t2']).;
  add_relation($T <: $T ==> $T $T);
  add_relation("join", [$T, $T, $T, $T, $T]);
  add_relation("meet", [$T, $T, $T, $T, $T]);

  # mode: ... | subtype_flow => inp inp out out | join => inp inp out out out | meet => inp inp out out out;
  # principal: ... | subtype_flow => yes yes no no | join => yes yes no no no | meet => yes yes no no no;

  (* add some grounding rules for the new relations *)
  add_rules(concat(Type[`(c ts)` when not(c = "dyn")]:
    if empty?(ts) then [
      ["S-DYN-" ^ uppercase(c)] {
        --------------------------------------
        ("dyn" []) <: (c []) ==> (c []) (c [])
      },
      ["S-" ^ uppercase(c) ^ "-DYN"] {
        --------------------------------------
        (c []) <: ("dyn" []) ==> (c []) (c [])
      },
      ["JOIN-DYN-" ^ uppercase(c)] {
        ------------------------------------------------------
        &("join" [("dyn" []), (c []), (c []), (c []), (c [])])
      },
      ["JOIN-" ^ uppercase(c) ^ "-DYN"] {
        ------------------------------------------------------
        &("join" [(c []), ("dyn" []), (c []), (c []), (c [])])
      },
      ["MEET-DYN-" ^ uppercase(c)] {
        --------------------------------------------------------------
        &("meet" [("dyn" []), (c []), ("dyn" []), (c []), (c [])])
      },
      ["MEET-" ^ uppercase(c) ^ "-DYN"] {
        --------------------------------------------------------------
        &("meet" [(c []), ("dyn" []), ("dyn" []), (c []), (c [])])
      }
    ] else [
      ["S-DYN-" ^ uppercase(c)] {
        (c (ts[`_`]: ("dyn" []))) <: (c ts) ==> $T1' $T2'
        -------------------------------------------------
        ("dyn" []) <: (c ts) ==> $T1' $T2'
      },
      ["S-" ^ uppercase(c) ^ "-DYN"] {
        (c ts) <: (c (ts[`_`]: ("dyn" []))) ==> $T1' $T2'
        -------------------------------------------------
        (c ts) <: ("dyn" []) ==> $T1' $T2'
      },
      ["JOIN-DYN-" ^ uppercase(c)] {
        &("join" [(c (ts[`_`]: ("dyn" []))), (c ts), $T1', $T2', $T3'])
        ---------------------------------------------------------------
        &("join" [("dyn" []), (c ts), $T1', $T2', $T3'])
      },
      ["JOIN-" ^ uppercase(c) ^ "-DYN"] {
        &("join" [(c ts), (c (ts[`_`]: ("dyn" []))), $T1', $T2', $T3'])
        ---------------------------------------------------------------
        &("join" [(c ts), ("dyn" []), $T1', $T2', $T3'])
      },
      ["MEET-DYN-" ^ uppercase(c)] {
        &("meet" [(c (ts[`_`]: ("dyn" []))), (c ts), $T1', $T2', $T3'])
        --------------------------------------------------------------
        &("meet" [("dyn" []), (c ts), $T1', $T2', $T3'])
      },
      ["MEET-" ^ uppercase(c) ^ "-DYN"] {
        &("meet" [(c ts), (c (ts[`_`]: ("dyn" []))), $T1', $T2', $T3'])
        --------------------------------------------------------------
        &("meet" [(c ts), ("dyn" ts), $T1', $T2', $T3'])
      }
    ]
  ));

  add_rule(["S-DYN"] {
    --------------------------------------------------
    ("dyn" []) <: ("dyn" []) ==> ("dyn" []) ("dyn" [])
  });

  add_rule(["JOIN-DYN"] {
    ----------------------------------------------------------------------
    &("join" [("dyn" []), ("dyn" []), ("dyn" []), ("dyn" []), ("dyn" [])])
  });

  add_rule(["MEET-DYN"] {
    ----------------------------------------------------------------------
    &("meet" [("dyn" []), ("dyn" []), ("dyn" []), ("dyn" []), ("dyn" [])])
  })
) else skip);

let seek
    (h: string)
    (key: string)
    (data: term list)
    (tag: string) =
  match assoc(key, hint(h)) with
  | none -> []
  | some(m) -> zip(m, data)[`(x, t)` when x = tag]: t
in

let map_merge
    (m1: (term, term list) tuple list)
    (m2: (term, term list) tuple list) =
  let m = m1[`(t, ts)`]:
    match assoc(t, m2) with
    | none -> (t, ts)
    | some(tts) -> (t, ts @ tts)
  in
  let ov = diff(m2[`(t, _)`]: t, m1[`(t, _)`]: t) in
  let rest = ov[`t`]: (t, m2(t)) in
  m @ rest
in

(* gradualize the typing rules *)
set_rules(Rule(keep)[`gamma |- e : t`]: (
  let name = rule_name(self) in
  let op = match e with (op _) -> op | _ -> "" in

  (* split equal types in the outputs *)
  let (new_premises, tmap) =
    let ignored = Premises[`_`]:
      match self with
      | _ |- _ : _{_/x} -> some(self)
      | _ -> none
    in
    uniquify(Premises[`_`]: self, ignored, hint("mode"), "out")
  in

  let not_uniquified = dedup(concat(Premises[`&(pred ts)`]:
    let outs = seek("mode", pred, ts, "out") in
    vars(outs)[`t` when var_kind?(t, "Type") && not(assoc?(t, tmap))]: self))
  in
  let tmap = map_merge(tmap, not_uniquified[`t`]: (t, [t.])) in

  [name] {
    new_premises
    ------------------
    conclusion
  };
    
  let tmap = map_merge(tmap, vars(e)[`t` when var_kind?(t, "Type")]: (t, [t.])) in
  let tmap_inverse = concat(tmap[`(t, ts)`]: ts[`_`]: (self, t)) in

  (* find producers, consumers, and final types *)
  let rec extract_contra (t: term) : term list =
    match t with
    | (c ts) ->
      let contras = seek("variance", c, ts, "contra") in
      vars(contras) @ concat(diff(ts, contras)[`_`]: extract_contra(self))
    | _ -> []
  in
  let consumers = concat(Premises[`_ |- _ : t`]: extract_contra(t)) in
  let final_type = 
    let evars = vars(e) in
    tmap[`(t, ts)`]:
      if less?(length(ts), 2) then (t, t)
      else
        let ol = var_overlap(evars, ts) in
        if not(empty?(ol)) then (t, head(ol))
        else
          let ol = var_overlap(consumers, ts) in
          if not(empty?(ol)) then (t, head(ol))
          else (t, t')
  in
  let producers = diff(keys(tmap_inverse), consumers) in
  let lone_inputs =
    diff(vars(self), consumers @ producers)[`t` when var_kind?(t, "Type")]: t
  in
   
  let extract_type_by_index (e: term) (n: int) =
    head(Premises[`_ |- ee : t` when e = ee]:
      nth(vars!(t)[`t` when var_kind?(t, "Type")]: t, n))
  in
  let consumer_type_by_user =
    match assoc(op, hint_list("flows")) with
    | none -> []
    | some(flows) ->
      concat(flows[`[e1, n1, e2, n2]`]:
        let t1 = extract_type_by_index($!e1, str_int(n1)) in
        let t2 = extract_type_by_index($!e2, str_int(n2)) in
        [(t2, t1), (t1, t1)])
  in
  
  (* mark each producer as flowing to consumers through their final type *)
  [name] {
    Premises,
    tmap[`(t, ts)`]:
      if less?(length(ts), 2) then none
      else some(&("gjoin" (ts @ [t'.]))),
    Premises[`_`]:
      match self with
      | t1 <: t2 ==> t3 t4 -> [&("flows" [t1, t3]), &("flows" [t2, t4])]
      | &("join" [t1, t2, t3, t4, t5]) -> [&("flows" [t1, t4]), &("flows" [t2, t5])]
      | &("meet" [t1, t2, t3, t4, t5]) -> [&("flows" [t1, t4]), &("flows" [t2, t5])]
      | _ -> [],
    dedup(concat(tmap_inverse[`(t1, t2)`]: (
      let tuser = assoc(t1, consumer_type_by_user) in
      let tfinal =
        match tuser with
        | none -> final_type(t2)
        | some(t) -> t
      in
      let tcons = var_overlap(tmap(t2), consumers) in
      let flowfinal = &("flows" [t1, tfinal]) in
      let flowcons = match tcons with
        | [] -> []
        | t :: _ ->
          let t = if none?(tuser) then t else get(tuser) in
          [&("flows" [tfinal, t]).]
      in
      flowfinal :: flowcons)))
    ---------------------------------------------------------
    conclusion
  };
  
  (* replace each input by its final type *)
  let flowc =
    match assoc(op, hint_list("flows")) with
    | none -> []
    | some(flows) -> flows[`[_, "c", _, _, _]`]: self
  in
  (if empty?(flowc) then substitute(self, final_type)
   else
     let prev_vars = keys(tmap_inverse) in
     let (new_concl, tmap) = 
       uniquify([conclusion.], [], hint("mode"), "out", prev_vars)
     in
     let inputmap = flowc[`[t, _, n1, e, n2]`]:
       let t1 = nth(tmap($!t), str_int(n1)) in
       let t2 = extract_type_by_index($!e, str_int(n2)) in
       (t1, t2)
     in
     let lonemap = concat(tmap[`(t, ts)`]:
       if member?(t, lone_inputs) then (ts[`_`]: (self, t)) else [])
     in
     set_conclusion(self, substitute(head(new_concl), lonemap @ inputmap)));
  
  (* use pattern matching on type constructors in the outputs and
   * restrict lone input variables to range over static types only *)
  let rec make_match (t: term) : (term, formula list) tuple =
    match t with
    | (c ts) ->
      let (new_ts, fs) = unzip(ts[`t`]: make_match(t)) in
      let fs = concat(fs) in
      let typ = fresh_var("M") in
      (typ, &("matches" [typ, (c new_ts)]) :: fs)
    | _ -> (t, [])
  in
  [name] {
    Premises(keep)[`gamma |- e : t`]:
      let (t, fs) = make_match(t) in
      (gamma |- e : t) :: fs,
    (* first check if the lone input was substituted *)
    let r_vars = vars(self) in
    lone_inputs[`t` when member?(t, r_vars) && constructor?(e)]: &("static" [t.])
    ------------------------------------------------------------------------------
    conclusion
  };
 
  (* remove duplicates and trivial flows *) 
  [name] {
    dedup(Premises(keep)[`&("flows" [t1, t2])`]:
      if t1 = t2 then none else some(self))
    -----------------------------------------
    conclusion
  };

  (* compile to the cast calculus *)
  lift (gamma |- e : t) to (gamma |- ("ci" [e, e']) : t).;
  let rec destination_type (t: term) : term =
    let typs = concat(Premises[`f`]:
      match f with
      | &("matches" [t1, (c ts)]) when t1 = t ->
        [(c (ts[`t`]: destination_type(t))).]
      | &("flows" [t1, t2]) when t2 = t ->
        if member?(t1, consumers) then [t1.] else [t2.]
      | &("flows" [t1, t2]) when t1 = t ->
        if member?(t1, consumers) then [t1.] else [t2.]
      | _ -> [])
    in
    if empty?(typs) then t else head(typs)
  in
  let dests =
    if empty?(Premises) then []
    else vars(self)[`t`]: (t, destination_type(t))
  in
  let emap = (e, t) :: Premises[`_ |- ("ci" [e, _]) : t`]: (e, t) in
  let rec insert_cast (e: term) : term =
    match e with
    | (op es) -> (op (es[`e`]: insert_cast(e)))
    | _ ->
      match assoc(e, emap) with
      | none -> e
      | some(t) ->
        let tsub = substitute(t, dests) in
        if t = tsub then e else ("gcast" [e, t, tsub])
  in

  match conclusion with gamma |- ("ci" [e, _]) : t ->

  [name] {
    Premises
    ------------------------------------------------------------
    gamma |- ("ci" [e, insert_cast(e)'|(vars(e)[`t` when var_kind?(t, "Expression")]: t)]) : t
  };
  
  [name] {
    Premises(keep)[`&("gjoin" ts)`]:
      if member?(last(ts), vars(t)) then some(self) else none
    ---------------------------------------------------------
    conclusion
  };

  let join_ts = Premises[`_`]:
    match self with
    | &("gjoin" ts) -> some(last(ts))
    | _ -> none
  in

  [name] {
    Premises(keep)[`&("flows" [t1, t2])`]:
      if member?(t2, join_ts) || (t1 = t2) then none else some(t1 ~ t2)
    -------------------------------------------------------------------
    conclusion
  }
));

add_rule(["T-GCAST"] {
  $Gamma |- $e : $T1,
  $T1 ~ $T2
  ---------------------------------------
  $Gamma |- ("gcast" [$e, $T1, $T2]) : $T2
})
