Context E ::= (add E e) | (add v E) | (app E e) | (app v E) | (hole.) | (succ E)
Environment Gamma ::= [<x, T>...]
Expression e ::= x | (abs T (x)e) | (add e e) | (app e e) | (gcast e T T L) | (succ e) | (zero.)
Ground G ::= (arrow (dyn.) (dyn.)) | (nat.)
Type T ::= (arrow T T) | (dyn.) | (nat.)
Value v ::= (abs T (x)e) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (succ v) | (zero.)

%

T ~ T.
gjoin T T T.
matches T T.
static T.
e --> e.
Gamma |- e : T.
Gamma |- e ==> e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-NAT]
--------------------------------------
(nat.) ~ (nat.).

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[CC-T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) ==> (abs T1 (x)e') : (arrow T1 T2).

[CC-T-ADD]
Gamma |- e1 : M1,
matches M1 (nat.),
Gamma |- e2 : M2,
matches M2 (nat.)
--------------------------------------
Gamma |- (add e1 e2) ==> (add (gcast e1' M1 (nat.) L1) (gcast e2' M2 (nat.) L2)) : (nat.).

[CC-T-APP]
Gamma |- e1 : M3,
matches M3 (arrow T1_1 T2),
Gamma |- e2 : T1_2,
gjoin T1_1 T1_2 T1',
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) ==> (app (gcast e1' M3 (arrow T1_1 T2) L3) (gcast e2' T1_2 T1_1 L4)) : T2.

[CC-T-SUCC]
Gamma |- e : M4,
matches M4 (nat.)
--------------------------------------
Gamma |- (succ e) ==> (succ (gcast e' M4 (nat.) L5)) : (nat.).

[CC-T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x ==> x' : T.

[CC-T-ZERO]
--------------------------------------
Gamma |- (zero.) ==> (zero.) : (nat.).

[GJOIN-ARROW]
gjoin T1 T1' T1'',
gjoin T2 T2' T2''
--------------------------------------
gjoin (arrow T1 T2) (arrow T1' T2') (arrow T1'' T2'').

[GJOIN-DYN-T]
--------------------------------------
gjoin (dyn.) T T.

[GJOIN-NAT]
--------------------------------------
gjoin (nat.) (nat.) (nat.).

[GJOIN-T-DYN]
--------------------------------------
gjoin T (dyn.) T.

[MATCHES-ARROW]
--------------------------------------
matches (arrow T1 T2) (arrow T1 T2).

[MATCHES-DYN-ARROW]
--------------------------------------
matches (dyn.) (arrow (dyn.) (dyn.)).

[MATCHES-DYN-NAT]
--------------------------------------
matches (dyn.) (nat.).

[MATCHES-NAT]
--------------------------------------
matches (nat.) (nat.).

[R-ADD-SUCC]
--------------------------------------
(add (succ v1) v2) --> (add v1 (succ v2)).

[R-ADD-ZERO]
--------------------------------------
(add (zero.) v) --> v.

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[STATIC-ARROW]
static T1,
static T2
--------------------------------------
static (arrow T1 T2).

[STATIC-NAT]
--------------------------------------
static (nat.).

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-ADD]
Gamma |- e1 : M1,
matches M1 (nat.),
Gamma |- e2 : M2,
matches M2 (nat.)
--------------------------------------
Gamma |- (add e1 e2) : (nat.).

[T-APP]
Gamma |- e1 : M3,
matches M3 (arrow T1_1 T2),
Gamma |- e2 : T1_2,
gjoin T1_1 T1_2 T1',
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-SUCC]
Gamma |- e : M4,
matches M4 (nat.)
--------------------------------------
Gamma |- (succ e) : (nat.).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

[T-ZERO]
--------------------------------------
Gamma |- (zero.) : (nat.).

%

eliminationform: add => 0 | app => 0.
mode: consistent => inp inp | gjoin => inp inp out | matches => inp out | static => inp | step => inp out | typeof => inp inp out | typeof_cc => inp inp out out.
principal: consistent => yes yes | gjoin => yes yes no | matches => yes no | static => yes | step => yes no | typeof => no yes no | typeof_cc => no yes no no.
variance: arrow => contra cov.
