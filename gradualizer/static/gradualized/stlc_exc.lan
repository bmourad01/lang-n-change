Context E ::= (app E e) | (app v E) | (hole.) | (raise T E) | (try E e)
Environment Gamma ::= [<x, T>...]
Error er ::= (raise T e)
Expression e ::= x | (abs T (x)e) | (app e e) | (gcast e T T L) | (raise T e) | (try e e)
Ground G ::= (arrow (dyn.) (dyn.)) | (excT.)
Type T ::= (arrow T T) | (dyn.) | (excT.)
Value v ::= (abs T (x)e) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L)

%

T ~ T.
gjoin T T T.
matches T T.
static T.
e --> e.
Gamma |- e : T.
Gamma |- e ==> e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-EXCT]
--------------------------------------
(excT.) ~ (excT.).

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[CC-T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) ==> (abs T1 (x)e') : (arrow T1 T2).

[CC-T-APP]
Gamma |- e1 : M1,
matches M1 (arrow T1_1 T2),
Gamma |- e2 : T1_2,
gjoin T1_1 T1_2 T1',
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) ==> (app (gcast e1' M1 (arrow T1_1 T2) L1) (gcast e2' T1_2 T1_1 L2)) : T2.

[CC-T-RAISE]
Gamma |- e : M2,
matches M2 (excT.)
--------------------------------------
Gamma |- (raise T e) ==> (raise T (gcast e' M2 (excT.) L3)) : T.

[CC-T-TRY]
Gamma |- e1 : T_1,
Gamma |- e2 : M4,
matches M4 (arrow M3 T_2),
matches M3 (excT.),
gjoin T_1 T_2 T'
--------------------------------------
Gamma |- (try e1 e2) ==> (try (gcast e1' T_1 T' L4) (gcast e2' M4 (arrow (excT.) T') L5)) : T'.

[CC-T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x ==> x' : T.

[GJOIN-ARROW]
gjoin T1 T1' T1'',
gjoin T2 T2' T2''
--------------------------------------
gjoin (arrow T1 T2) (arrow T1' T2') (arrow T1'' T2'').

[GJOIN-DYN-T]
--------------------------------------
gjoin (dyn.) T T.

[GJOIN-EXCT]
--------------------------------------
gjoin (excT.) (excT.) (excT.).

[GJOIN-T-DYN]
--------------------------------------
gjoin T (dyn.) T.

[MATCHES-ARROW]
--------------------------------------
matches (arrow T1 T2) (arrow T1 T2).

[MATCHES-DYN-ARROW]
--------------------------------------
matches (dyn.) (arrow (dyn.) (dyn.)).

[MATCHES-DYN-EXCT]
--------------------------------------
matches (dyn.) (excT.).

[MATCHES-EXCT]
--------------------------------------
matches (excT.) (excT.).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-TRY-1]
--------------------------------------
(try (raise T v) e) --> (app e v).

[R-TRY-2]
--------------------------------------
(try v e) --> v.

[STATIC-ARROW]
static T1,
static T2
--------------------------------------
static (arrow T1 T2).

[STATIC-EXCT]
--------------------------------------
static (excT.).

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : M1,
matches M1 (arrow T1_1 T2),
Gamma |- e2 : T1_2,
gjoin T1_1 T1_2 T1',
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-RAISE]
Gamma |- e : M2,
matches M2 (excT.)
--------------------------------------
Gamma |- (raise T e) : T.

[T-TRY]
Gamma |- e1 : T_1,
Gamma |- e2 : M4,
matches M4 (arrow M3 T_2),
matches M3 (excT.),
gjoin T_1 T_2 T'
--------------------------------------
Gamma |- (try e1 e2) : T'.

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

%

eliminationform: app => 0 | try => 0.
mode: consistent => inp inp | gjoin => inp inp out | matches => inp out | static => inp | step => inp out | typeof => inp inp out | typeof_cc => inp inp out out.
principal: consistent => yes yes | gjoin => yes yes no | matches => yes no | static => yes | step => yes no | typeof => no yes no | typeof_cc => no yes no no.
variance: arrow => contra cov.
