Context E ::= (app E e) | (app v E) | (hole.) | (if E e e)
Environment Gamma ::= [<x, T>...]
Expression e ::= x | (abs T (x)e) | (app e e) | (ff.) | (gcast e T T L) | (ite e e e) | (tt.)
Ground G ::= (arrow (dyn.) (dyn.)) | (bool.)
Type T ::= (arrow T T) | (bool.) | (dyn.)
Value v ::= (abs T (x)e) | (ff.) | (gcast v G (dyn.) L) | (gcast v (arrow T T) (arrow T T) L) | (tt.)

%

T ~ T.
gjoin T T T.
matches T T.
static T.
e --> e.
Gamma |- e : T.
Gamma |- e ==> e : T.

%

[C-ARROW]
T1 ~ T1',
T2 ~ T2'
--------------------------------------
(arrow T1 T2) ~ (arrow T1' T2').

[C-BOOL]
--------------------------------------
(bool.) ~ (bool.).

[C-DYN]
--------------------------------------
(dyn.) ~ (dyn.).

[C-DYN-T]
--------------------------------------
(dyn.) ~ T.

[C-T-DYN]
--------------------------------------
T ~ (dyn.).

[CC-T-ABS]
[x => T1]Gamma |- e ==> e' : T2
--------------------------------------
Gamma |- (abs T1 (x)e) ==> (abs T1 (x)e') : (arrow T1 T2).

[CC-T-APP]
Gamma |- e1 ==> e1' : M1,
matches M1 (arrow T1_1 T2),
Gamma |- e2 ==> e2' : T1_2,
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) ==> (app (gcast e1' M1 (arrow T1_1 T2) L1) (gcast e2' T1_2 T1_1 L2)) : T2.

[CC-T-FALSE]
--------------------------------------
Gamma |- (ff.) ==> (ff.) : (bool.).

[CC-T-IF]
Gamma |- e1 ==> e1' : M2,
matches M2 (bool.),
Gamma |- e2 ==> e2' : T_1,
Gamma |- e3 ==> e3' : T_2,
gjoin T_1 T_2 T'
--------------------------------------
Gamma |- (ite e1 e2 e3) ==> (ite (gcast e1' M2 (bool.) L3) (gcast e2' T_1 T' L4) (gcast e3' T_2 T' L5)) : T'.

[CC-T-TRUE]
--------------------------------------
Gamma |- (tt.) ==> (tt.) : (bool.).

[CC-T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x ==> x : T.

[GJOIN-ARROW]
gjoin T1 T1' T1'',
gjoin T2 T2' T2''
--------------------------------------
gjoin (arrow T1 T2) (arrow T1' T2') (arrow T1'' T2'').

[GJOIN-BOOL]
--------------------------------------
gjoin (bool.) (bool.) (bool.).

[GJOIN-DYN-T]
--------------------------------------
gjoin (dyn.) T T.

[GJOIN-T-DYN]
--------------------------------------
gjoin T (dyn.) T.

[MATCHES-ARROW]
--------------------------------------
matches (arrow T1 T2) (arrow T1 T2).

[MATCHES-BOOL]
--------------------------------------
matches (bool.) (bool.).

[MATCHES-DYN-ARROW]
--------------------------------------
matches (dyn.) (arrow (dyn.) (dyn.)).

[MATCHES-DYN-BOOL]
--------------------------------------
matches (dyn.) (bool.).

[R-BETA]
--------------------------------------
(app (abs T (x)e) v) --> e{v/x}.

[R-IF-FALSE]
--------------------------------------
(ite (ff.) e1 e2) --> e2.

[R-IF-TRUE]
--------------------------------------
(ite (tt.) e1 e2) --> e1.

[STATIC-ARROW]
static T1,
static T2
--------------------------------------
static (arrow T1 T2).

[STATIC-BOOL]
--------------------------------------
static (bool.).

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : M1,
matches M1 (arrow T1_1 T2),
Gamma |- e2 : T1_2,
T1_2 ~ T1_1
--------------------------------------
Gamma |- (app e1 e2) : T2.

[T-FALSE]
--------------------------------------
Gamma |- (ff.) : (bool.).

[T-GCAST]
Gamma |- e : T1,
T1 ~ T2
--------------------------------------
Gamma |- (gcast e T1 T2 L) : T2.

[T-IF]
Gamma |- e1 : M2,
matches M2 (bool.),
Gamma |- e2 : T_1,
Gamma |- e3 : T_2,
gjoin T_1 T_2 T'
--------------------------------------
Gamma |- (ite e1 e2 e3) : T'.

[T-TRUE]
--------------------------------------
Gamma |- (tt.) : (bool.).

[T-VAR]
member <x, T> Gamma
--------------------------------------
Gamma |- x : T.

%

eliminationform: app => 0 | ite => 0.
mode: consistent => inp inp | gjoin => inp inp out | matches => inp out | static => inp | step => inp out | typeof => inp inp out | typeof_cc => inp inp out out.
principal: consistent => yes yes | gjoin => yes yes no | matches => yes no | static => yes | step => yes no | typeof => no yes no | typeof_cc => no yes no no.
variance: arrow => contra cov.
