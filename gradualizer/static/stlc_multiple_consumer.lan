Expression e ::= x | (abs T (x)e) | (app e e) | (app1 e e e) | (app2 e e e) | (app3 e e) | (tt.) | (ff.) | (pair e e) | (fst e) | (snd e)
Value v ::= (abs T (x)e) | (tt.) | (ff.) | (pair v v)
Type T ::= (arrow T T) | (bool.) | (times T T)
Context E ::= (hole.) | (app E e) | (app v E) | (app1 E e e) | (app1 v E e) | (app1 v v E) | (app2 E e e) | (app2 v E e) | (app2 v v E) | (app3 E e) | (app3 v E) | (pair E e) | (pair v E) | (fst E) | (snd E)
Environment Gamma ::= [<x, T>...]

%

e --> e.
Gamma |- e : T.

%

[T-VAR]
member <x, T> Gamma
--------------------------------
Gamma |- x : T.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------
Gamma |- (app e1 e2) : T2.

[T-APP1]
Gamma |- e1 : (arrow T (arrow T (bool.))),
Gamma |- e2 : T,
Gamma |- e3 : T
--------------------------------
Gamma |- (app1 e1 e2 e3) : (bool.).

[T-APP2]
Gamma |- e1 : (arrow T (arrow T (bool.))),
Gamma |- e2 : T,
Gamma |- e3 : T
--------------------------------
Gamma |- (app1 e1 e2 e3) : (times (arrow T (bool.)) (arrow T (bool.))).

[T-APP3]
Gamma |- e1 : (arrow T (arrow T (bool.))),
Gamma |- e2 : (times T T)
--------------------------------
Gamma |- (app e1 e2) : T2.

[T-TRUE]
--------------------------------
Gamma |- (tt.) : (bool.).
 
[T-FALSE]
--------------------------------
Gamma |- (ff.) : (bool.).

[T-PAIR]
Gamma |- e1 : T1,
Gamma |- e2 : T2
--------------------------------
Gamma |- (pair e1 e2) : (times T1 T2).

[T-FST]
Gamma |- e : (times T1 T2)
--------------------------------
Gamma |- (fst e) : T1.

[T-SND]
Gamma |- e : (times T1 T2)
--------------------------------
Gamma |- (snd e) : T2.
    
[R-BETA]
--------------------------------
(app (abs T (x)e) v) --> e[v/x].

[R-APP1]
--------------------------------
(app1 v1 v2 v3) --> (app (app v1 v2) v3).

[R-APP2]
--------------------------------
(app2 v1 v2 v3) --> (pair (app v1 v2) (app v1 v3)).

[R-APP3]
--------------------------------
(app3 v1 v2) --> (pair (app v1 (snd v2)) (app v1 (fst v2))).

[R-FST]
--------------------------------
(fst (pair v1 v2)) --> v1.

[R-SND]
--------------------------------
(snd (pair v1 v2)) --> v2.

%

mode: typeof => inp inp out | step => inp out.
principal: typeof => no yes no | step => yes no.
variance: arrow => contra cov.
eliminationform: app => 0 | app1 => 0 | app2 => 0 | app3 => 0.
flows: app1 => [e1, 0, e2, 0] [e1, 1, e3, 0] | app2 => [e1, 0, e2, 0] [e1, 1, e3, 0] | app3 => [e1, 0, e2, 1] [e1, 1, e2, 0].
