Expression e ::= x
                 | (abs T (x)e) | (app e e)
                 | (cons e e) | (nill.) | (head e) | (tail e) | (is_nil e) | (is_cons e) | (filter e e) | (filter_map e e) | (map e e) | (mapi e e e) | (append e e)
                 | (pair e e) | (fst e) | (snd e)
                 | (err.)
                 | (tt.) | (ff.) | (ite e e e) | (nott e) | (andd e e) | (orr e e)
                 | (zero.) | (succ e) | (pred e) | (is_zero e) | (is_succ e) | (add e e) | (sub e e)
                 | (let e (x)e)
                 | (fix e) | (letrec T (x)e (x)e)
                 | (absT (Z)e) | (appT e T)
                 | (none.) | (some e) | (get e) | (is_none e) | (is_some e)
                 | (inl e) | (inr e) | (case e (x)e (x)e)
                 | (fold e (Z)T) | (unfold e)

Error er ::= (err.)

Value v ::= (abs T (x)e)
            | (cons v v) | (nill.)
            | (pair v v)
            | (tt.) | (ff.)
            | (zero.) | (succ v)
            | (absT (Z)e)
            | (none.) | (some v)
            | (inl v) | (inr v)
            | (fold v (Z)T)

Type T ::= Z
           | (arrow T T)
           | (list T)
           | (times T T)
           | (bool.)
           | (nat.)
           | (all (Z)T)
           | (option T)
           | (sum T T)
           | (mu (Z)T)

Context E ::= (hole.)
              | (app E e) | (app v E)
              | (cons E e) | (cons v E) | (head E) | (tail E) | (is_nil E) | (is_cons E)
              | (filter E e) | (filter v E) | (filter_map E e) | (filter_map v E) | (map E e) | (map v E) | (mapi E e e) | (mapi v E e) | (mapi v v E) | (append E e) | (append v E)
              | (pair E e) | (pair v E) | (fst E) | (snd E)
              | (ite E e e) | (nott E) | (andd E e) | (andd v E) | (orr E e) | (orr v E)
              | (succ E) | (pred E) | (is_zero E) | (is_succ E) | (add E e) | (add v E) | (sub E e) | (sub v E)
              | (let E (x)e)
              | (appT E T)
              | (some E) | (get E) | (is_some E) | (is_none E)
              | (inl E) | (inr E) | (case E (x)e (x)e)
              | (fix E)
              | (fold E (Z)T) | (unfold E)

Environment Gamma ::= {x => T}
    
%

e --> e.
Gamma |- e : T.

%

[T-VAR]
member <x, T> Gamma
--------------------------------
Gamma |- x : T.

[T-CONS]
Gamma |- e1 : T,
Gamma |- e2 : (list T)
--------------------------------
Gamma |- (cons e1 e2) : (list T).

[T-NIL]
--------------------------------
Gamma |- (nill.) : (list T).
 
[T-HEAD]
Gamma |- e : (list T)
--------------------------------
Gamma |- (head e) : T.

[T-TAIL]
Gamma |- e : (list T)
--------------------------------
Gamma |- (tail e) : (list T).

[T-IS-NIL]
Gamma |- e : (list T)
--------------------------------
Gamma |- (is_nil e) : (bool.).

[T-IS-CONS]
Gamma |- e : (list T)
--------------------------------
Gamma |- (is_cons e) : (bool.).

[T-FILTER]
Gamma |- e1 : (list T),
Gamma |- e2 : (arrow T (bool.))
--------------------------------
Gamma |- (filter e1 e2) : (list T).

[T-FILTER-MAP]
Gamma |- e1 : (list T1),
Gamma |- e2 : (arrow T1 (option T2))
--------------------------------
Gamma |- (filter_map e1 e2) : (list T2).

[T-MAP]
Gamma |- e1 : (list T1),
Gamma |- e2 : (arrow T1 T2)
--------------------------------
Gamma |- (map e1 e2) : (list T2).

[T-MAPI]
Gamma |- e1 : (list T1),
Gamma |- e2 : (arrow (nat.) (arrow T1 T2)),
Gamma |- e3 : (nat.)
--------------------------------
Gamma |- (mapi e1 e2 e3) : (list T2).

[T-APPEND]
Gamma |- e1 : (list T),
Gamma |- e2 : (list T)
--------------------------------
Gamma |- (append e1 e2) : (list T).

[T-PAIR]
Gamma |- e1 : T1,
Gamma |- e2 : T2
--------------------------------
Gamma |- (pair e1 e2) : (times T1 T2).

[T-FST]
Gamma |- e : (times T1 T2)
--------------------------------
Gamma |- (fst e) : T1.

[T-SND]
Gamma |- e : (times T1 T2)
--------------------------------
Gamma |- (snd e) : T2.

[T-ABS]
[x => T1]Gamma |- e : T2
--------------------------------
Gamma |- (abs T1 (x)e) : (arrow T1 T2).

[T-APP]
Gamma |- e1 : (arrow T1 T2),
Gamma |- e2 : T1
--------------------------------
Gamma |- (app e1 e2) : T2.

[T-TRUE]
--------------------------------
Gamma |- (tt.) : (bool.).
 
[T-FALSE]
--------------------------------
Gamma |- (ff.) : (bool.).

[T-IF]
Gamma |- e1 : (bool.),
Gamma |- e2 : T,
Gamma |- e3 : T
--------------------------------
Gamma |- (ite e1 e2 e3) : T.

[T-NOT]
Gamma |- e : (bool.)
--------------------------------
Gamma |- (nott e) : (bool.).

[T-AND]
Gamma |- e1 : (bool.),
Gamma |- e2 : (bool.)
--------------------------------
Gamma |- (andd e1 e2) : (bool.).

[T-OR]
Gamma |- e1 : (bool.),
Gamma |- e2 : (bool.)
--------------------------------
Gamma |- (orr e1 e2) : (bool.).

[T-ZERO]
--------------------------------
Gamma |- (zero.) : (nat.).

[T-SUCC]
Gamma |- e : (nat.)
--------------------------------
Gamma |- (succ e) : (nat.).

[T-PRED]
Gamma |- e : (nat.)
--------------------------------
Gamma |- (pred e) : (nat.).

[T-IS-ZERO]
Gamma |- e : (nat.)
--------------------------------
Gamma |- (is_zero e) : (bool.).

[T-IS-SUCC]
Gamma |- e : (nat.)
--------------------------------
Gamma |- (is_succ e) : (bool.).

[T-ADD]
Gamma |- e1 : (nat.),
Gamma |- e2 : (nat.)
--------------------------------
Gamma |- (add e1 e2) : (nat.).
 
[T-SUB]
Gamma |- e1 : (nat.),
Gamma |- e2 : (nat.)
--------------------------------
Gamma |- (sub e1 e2) : (nat.).

[T-LET]
Gamma |- e1 : T1,
[x => T1]Gamma |- e2 : T2
--------------------------------
Gamma |- (let e1 (x)e2) : T2.

[T-ABST]
Gamma |- e : T
--------------------------------
Gamma |- (absT (Z)e) : (all (Z)T).

[T-APPT]
Gamma |- e : (all (Z)T2)
--------------------------------
Gamma |- (appT e T1) : T2[T1/Z].

[T-NONE]
--------------------------------
Gamma |- (none.) : (option T).

[T-SOME]
Gamma |- e : T
--------------------------------
Gamma |- (some e) : (option T).

[T-GET]
Gamma |- e : (option T)
--------------------------------
Gamma |- (get e) : T.

[T-IS-NONE]
Gamma |- e : (option T)
--------------------------------
Gamma |- (is_none e) : (bool.).

[T-IS-SOME]
Gamma |- e : (option T)
--------------------------------
Gamma |- (is_some e) : (bool.).

[T-INL]
Gamma |- e : T1
--------------------------------
Gamma |- (inl e) : (sum T1 T2).

[T-INR]
Gamma |- e : T2
--------------------------------
Gamma |- (inr e) : (sum T1 T2).

[T-CASE]
Gamma |- e1 : (sum T1 T2),
[x1 => T1]Gamma |- e2 : T,
[x2 => T2]Gamma |- e3 : T
--------------------------------
Gamma |- (case e1 (x1)e2 (x2)e3) : T.

[T-FIX]
Gamma |- e : (arrow T T)
--------------------------------
Gamma |- (fix e) : T.

[T-LETREC]
[x => T1]Gamma |- e1 : T1,
[x => T1]Gamma |- e2 : T2
--------------------------------
Gamma |- (letrec T1 (x)e1 (x)e2) : T2.

[T-FOLD]
Gamma |- e : T[(mu (Z)T)/Z]
--------------------------------
Gamma |- (fold e (Z)T) : (mu (Z)T).

[T-UNFOLD]
Gamma |- e : (mu (Z)T)
--------------------------------
Gamma |- (unfold e) : T[(mu (Z)T)/Z].

[T-ERR]
--------------------------------
Gamma |- (err.) : T.

[R-BETA]
--------------------------------
(app (abs T (x)e) v) --> e[v/x].

[R-HEAD-NIL]
--------------------------------
(head (nill.)) --> (err.).

[R-TAIL-NIL]
--------------------------------
(tail (nill.)) --> (err.).
    
[R-HEAD-CONS]
--------------------------------
(head (cons v1 v2)) --> v1.

[R-TAIL-CONS]
--------------------------------
(tail (cons v1 v2)) --> v2.

[R-IS-NIL-TRUE]
--------------------------------
(is_nil (nill.)) --> (tt.).

[R-IS-NIL-FALSE]
--------------------------------
(is_nil (cons v1 v2)) --> (ff.).

[R-IS-CONS-TRUE]
--------------------------------
(is_cons (cons v1 v2)) --> (tt.).

[R-IS-CONS-FALSE]
--------------------------------
(is_cons (nill.)) --> (ff.).

[R-FILTER-NIL]
--------------------------------
(filter (nill.) v) --> (nill.).

[R-FILTER-CONS]
--------------------------------
(filter (cons v1 v2) v3) --> (ite (app v3 v1) (cons v1 (filter v2 v3)) (filter v2 v3)).

[R-FILTER-MAP-NIL]
--------------------------------
(filter_map (nill.) v) --> (nill.).

[R-FILTER-MAP-CONS]
--------------------------------
(filter_map (cons v1 v2) v3) --> (ite (is_some (app v3 v1)) (cons v1 (filter_map v2 v3)) (filter_map v2 v3)).

[R-MAP-NIL]
--------------------------------
(map (nill.) v) --> (nill.).

[R-MAP-CONS]
--------------------------------
(map (cons v1 v2) v3) --> (cons (app v3 v1) (map v2 v3)).

[R-MAPI-NIL]
--------------------------------
(mapi (nill.) v1 v2) --> (nill.).

[R-MAPI-CONS]
--------------------------------
(mapi (cons v1 v2) v3 v4) --> (cons (app (app v3 v4) v1) (mapi v2 v3 (succ v4))).

[R-APPEND-NIL]
--------------------------------
(append (nill.) v) --> v.

[R-APPEND-CONS]
--------------------------------
(append (cons v1 v2) v3) --> (cons v1 (append v2 v3)).

[R-FST]
--------------------------------
(fst (pair v1 v2)) --> v1.

[R-SND]
--------------------------------
(snd (pair v1 v2)) --> v2.

[R-IF-TRUE]
--------------------------------
(ite (tt.) e1 e2) --> e1.

[R-IF-FALSE]
--------------------------------
(ite (ff.) e1 e2) --> e2.

[R-NOT-TRUE]
--------------------------------
(nott (tt.)) --> (ff.).

[R-NOT-FALSE]
--------------------------------
(nott (ff.)) --> (tt.).

[R-AND-TRUE-TRUE]
--------------------------------
(andd (tt.) (tt.)) --> (tt.).

[R-AND-FALSE-1]
--------------------------------
(andd (ff.) v) --> (ff.).

[R-AND-FALSE-2]
--------------------------------
(andd v (ff.)) --> (ff.).

[R-OR-TRUE-1]
--------------------------------
(orr (tt.) v) --> (tt.).

[R-OR-TRUE-2]
--------------------------------
(orr v (tt.)) --> (tt.).

[R-OR-FALSE]
--------------------------------
(orr (ff.) (ff.)) --> (ff.).

[R-PRED-ZERO]
--------------------------------
(pred (zero.)) --> (err.).

[R-PRED-SUCC]
--------------------------------
(pred (succ v)) --> v.

[R-IS-ZERO-TRUE]
--------------------------------
(is_zero (zero.)) --> (tt.).

[R-IS-ZERO-FALSE]
--------------------------------
(is_zero (succ v)) --> (ff.).

[R-IS-SUCC-TRUE]
--------------------------------
(is_succ (succ v)) --> (tt.).

[R-IS-SUCC-FALSE]
--------------------------------
(is_succ (zero.)) --> (ff.).

[R-ADD-ZERO]
--------------------------------
(add (zero.) v) --> v.

[R-ADD-SUCC]
--------------------------------
(add (succ v1) v2) --> (add v1 (succ v2)).

[R-SUB-ZERO-SUCC]
--------------------------------
(sub (zero.) (succ v)) --> (err.).
   
[R-SUB-ZERO-ZERO]
--------------------------------
(sub (zero.) (zero.)) --> (zero.).

[R-SUB-SUCC-SUCC]
--------------------------------
(sub (succ v1) (succ v2)) --> (sub v1 v2).
   
[R-SUB-SUCC-ZERO]
--------------------------------
(sub (succ v) (zero.)) --> (succ v).

[R-LET]
--------------------------------
(let v (x)e) --> e[v/x].

[R-ALPHA]
--------------------------------
(appT (absT (Z)e) T) --> e[T/Z].

[R-GET-NONE]
--------------------------------
(get (none.)) --> (err.).

[R-GET-SOME]
--------------------------------
(get (some v)) --> v.

[R-IS-NONE-TRUE]
--------------------------------
(is_none (none.)) --> (tt.).

[R-IS-NONE-FALSE]
--------------------------------
(is_none (some v)) --> (ff.).

[R-IS-SOME-TRUE]
--------------------------------
(is_some (some v)) --> (tt.).

[R-IS-SOME-FALSE]
--------------------------------
(is_some (none.)) --> (ff.).

[R-CASE-INL]
--------------------------------
(case (inl v) (x1)e1 (x2)e2) --> e1[v/x1].

[R-CASE-INR]
--------------------------------
(case (inr v) (x1)e1 (x2)e2) --> e2[v/x2].

[R-FIX]
--------------------------------
(fix (abs T (x)e)) --> e[(fix (abs T (x)e))/x].

[R-LETREC]
--------------------------------
(letrec T (x)e1 (x)e2) --> (let (fix (abs T (x)e1)) (x)e2).

[R-UNFOLD]
--------------------------------
(unfold (fold v (Z)T)) --> v.

%

mode: typeof => inp inp out | step => inp out.
principal: typeof => no yes no | step => yes no.
variance: arrow => contra cov | list => cov | times => cov cov | option => cov | sum => cov cov.
