set_rules(rules >>! [(op args) --> rhs] {
  let exprs = syntax(Expression) >> [(opp exprs)] {
    if opp = op then some(exprs) else none
  } in
  if empty?(exprs) then
    none
  else
    let v_res = fresh_var(v) in
    let exprs = head(exprs) in
    let emap = zip(exprs, args) in
    let new_args = emap >> [(expr, arg)] {expr'} in
    let new_target = if not(member?(rhs, args)) then v_res else rhs in
    
    some([rule_name(self)] {
      emap >> [(expr, arg)] {
        if and(var?(arg), not(member?(arg, vars(rhs)))) then
          none
        else
          some(expr' --> arg)
      },

      if not(member?(rhs, args))
      then none
      else some(rhs --> v_res),
    
      premises(self)
      ---------------------------------
      (op new_args) --> new_target 
    })
})
