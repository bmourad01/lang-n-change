%{
    open Ltr
%}

%token EOF
%token <string> STRING
%token <string> NAME
%token <int> INT
%token MOD
%token GRAMMARASSIGN
%token WILDCARD
%token TURNSTYLE
%token SUBTYPE
%token STEP
%token MID
%token COMMA
%token CONS
%token COLON
%token DOT
%token TICK
%token EXCL
%token CARET
%token SEMI
%token DASH
%token LSQUARE RSQUARE LPAREN RPAREN LBRACE RBRACE LANGLE RANGLE
%token FSLASH
%token MAPSTO
%token EQ
%token QMEMBER QNOTHING QSOMETHING QEMPTY QVAR QSTR QCONSTRUCTOR QBINDING QSUBST QLIST QMAP QTUPLE QVARKIND QOPKIND QSYNTAX
%token FRESHVAR SUBSTITUTE VAROVERLAP NTH HEAD TAIL LAST DIFF ASSOC APPEND REV DEDUP CONCAT VARS UNBIND BOUND NOTHING SOMETHING GET IF THEN ELSE LET REC UPPERCASE LOWERCASE INTSTR SELF UNIQUIFY REMOVESYNTAX METAVAR SYNTAX RULENAME PREMISES CONCLUSION RULES ADDRULE SETRULES HINT AND OR
%token NIL DOM RANGE MEMBER NOT UNION MAPUNION SUBSET ZIP FRESH

%start ltr
%type <Ltr.Exp.t> ltr

%%

ltr:
  | exp EOF { $1 }

exp:
  | INT
    { Exp.Int $1 }
