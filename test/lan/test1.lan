Expression e ::= x | (abs T (x)e) | (app e e)
                   | (cons e e) | (nill.) | (head e) | (tail e) | (nill.) | (filter e e)
                   | (pair e e) | (fst e) | (snd e)
                   | (err.)
                   | (tt.) | (ff.) | (ite e e e)
                   | (zero.) | (succ e) | (pred e)
                   | (let e (x)e)
                   | (absT (Z)e) | (appT e T)

Error er ::= (err.)

Value v ::= (abs T (x)e)
            | (cons v v) | (nill.)
            | (pair v v)
            | (tt.) | (ff.)
            | (zero.) | (succ v)
            | (absT (Z)e)

Type T ::= Z | (arrow T T)
             | (list T)
             | (times T T)
             | (bool.)
             | (nat.)
             | (all (Z)T)

Context E ::= (hole.) | (app E e) | (app v E)
                      | (cons E e) | (cons v E)
                      | (head E) | (tail E)
                      | (filter E e) | (filter v E)
                      | (pair E e) | (pair v E) | (fst E) | (snd E)
                      | (ite E e e)
                      | (succ E) | (pred E)
                      | (let E (x)e)
                      | (appT E T)

Environment Gamma ::= {x => T}
    
%

step (e, e)
typeof (Gamma, e, T)

%

[T-VAR]
member (<x, T>, Gamma)
--------------------------------
typeof (Gamma, x, T)
.

[T-CONS]
typeof (Gamma, e1, T),
typeof (Gamma, e2, (list T))
--------------------------------
typeof (Gamma, (cons e1 e2), (list T))
.

[T-NIL]
--------------------------------
typeof (Gamma, (nill.), (list T))
.
    
[T-HEAD]
typeof (Gamma, e, (list T))
--------------------------------
typeof (Gamma, (head e), T)
.

[T-TAIL]
typeof (Gamma, e, (list T))
--------------------------------
typeof (Gamma, (tail e), (list T))
.

[T-FILTER]
typeof (Gamma, e1, (list T)),
typeof (Gamma, e2, (arrow T (bool.)))
--------------------------------
typeof (Gamma, (filter e1 e2), (list T))
.

[T-PAIR]
typeof (Gamma, e1, T1),
typeof (Gamma, e2, T2)
--------------------------------
typeof (Gamma, (pair e1 e2), (times T1 T2))
.

[T-FST]
typeof (Gamma, e, (times T1 T2))
--------------------------------
typeof (Gamma, (fst e), T1)
.

[T-SND]
typeof (Gamma, e, (times T1 T2))
--------------------------------
typeof (Gamma, (snd e), T2)
.

[T-ABS]
typeof ([x => T1]Gamma, e, T2)
--------------------------------
typeof (Gamma, (abs T1 (x)e), (arrow T1 T2))
.

[T-APP]
typeof (Gamma, e1, (arrow T1 T2)),
typeof (Gamma, e2, T1)
--------------------------------
typeof (Gamma, (app e1 e2), T2)
.

[T-TRUE]
--------------------------------
typeof (Gamma, (tt.), (bool.))
.
 
[T-FALSE]
--------------------------------
typeof (Gamma, (ff.), (bool.))
.

[T-IF]
typeof (Gamma, e1, (bool.)),
typeof (Gamma, e2, T),
typeof (Gamma, e3, T)
--------------------------------
typeof (Gamma, (ite e1 e2 e3), T)
.

[T-ZERO]
--------------------------------
typeof (Gamma, (zero.), (nat.))
.

[T-SUCC]
typeof (Gamma, e, (nat.))
--------------------------------
typeof (Gamma, (succ e), (nat.))
.

[T-PRED]
typeof (Gamma, e, (nat.))
--------------------------------
typeof (Gamma, (pred e), (nat.))
.

[T-LET]
typeof (Gamma, e1, T1),
typeof ([x => T1]Gamma, e2, T2)
--------------------------------
typeof (Gamma, (let e1 (x)e2), T2)
.

[T-ABST]
typeof (Gamma, e, T)
--------------------------------
typeof (Gamma, (absT (Z)e), (all (Z)T))
.

[T-APPT]
typeof (Gamma, e, (all (Z)T2))
--------------------------------
typeof (Gamma, (appT e T1), T2[T1/Z])
.

[T-ERR]
--------------------------------
typeof (Gamma, (err.), T)
.

[R-BETA]
--------------------------------
step ((app (abs T (x)e) v), e[v/x])
.
    
[R-HEAD-NIL]
--------------------------------
step ((head (nill.)), (err.))
.

[R-TAIL-NIL]
--------------------------------
step ((tail (nill.)), (err.))
.
    
[R-HEAD-CONS]
--------------------------------
step ((head (cons v1 v2)), v1)
.

[R-TAIL-CONS]
--------------------------------
step ((tail (cons v1 v2)), v2)
.

[R-FILTER-NIL]
--------------------------------
step ((filter (nill.) v), (nill.))
.

[R-FILTER-CONS]
--------------------------------
step ((filter (cons v1 v2) v3), (ite (app v3 v1) (cons v1 (filter v2 v3)) (filter v2 v3)))
.

[R-FST]
--------------------------------
step ((fst (pair v1 v2)), v1)
.

[R-SND]
--------------------------------
step ((snd (pair v1 v2)), v2)
.

[R-IF-TRUE]
--------------------------------
step ((ite (tt.) e1 e2), e1)
.

[R-IF-FALSE]
--------------------------------
step ((ite (ff.) e1 e2), e2)
.

[R-PRED-ZERO]
--------------------------------
step ((pred (zero.)), (err.))
.

[R-PRED-SUCC]
--------------------------------
step ((pred (succ v)), v)
.

[R-LET]
--------------------------------
step ((let v (x)e), e[v/x])
.

[R-ALPHA]
--------------------------------
step ((appT (absT (Z)e) T), e[T/Z])
.

%

mode: typeof => inp inp out | step => inp out.
variance: arrow => contra cov | list => cov.
