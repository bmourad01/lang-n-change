Expression e ::= x | (abs T (x)e) | (app e e) | (cons e e) | (nil.)
Value v ::= (abs T (x)e) | (cons v v) | (nil.)
Type T ::= (arrow T T) | (list T)
Context E ::= (app E e) | (app v E) | (cons E e) | (cons v E)
Environment Gamma ::= {x => T}
 
%

[T-VAR]
member (<x, T>, Gamma)
--------------------------------
typeOf (Gamma, x, T)

[T-CONS]
typeOf (Gamma, e1, T),
typeOf (Gamma, e2, (list T))
--------------------------------
typeOf (Gamma, (cons e1 e2), (list T))

[T-NIL]
--------------------------------
typeOf (Gamma, (nil.), (list T))

[T-ABS]
typeOf ([x => T]Gamma, e, T2)
--------------------------------
typeOf (Gamma, (abs T1 (x)e), (arrow T1 T2))

[T-APP]
typeOf (Gamma, e1, (arrow T1 T2)),
typeOf (Gamma, e2, T1)
--------------------------------
typeOf (Gamma, (app e1 e2), T2)
    
[R-BETA]
--------------------------------
step ((app (abs T (x)e) v), e[v/x])
